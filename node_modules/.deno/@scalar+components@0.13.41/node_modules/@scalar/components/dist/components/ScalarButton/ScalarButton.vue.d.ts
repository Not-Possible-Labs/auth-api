import { type LoadingState } from '../ScalarLoading';
import { type Variants } from './variants.js';
/**
 * Scalar Button
 */
type __VLS_Props = {
    disabled?: boolean;
    fullWidth?: boolean;
    loading?: LoadingState | undefined;
    size?: Variants['size'];
    variant?: Variants['variant'];
    type?: 'button' | 'submit' | 'reset';
};
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: {
        icon?(_: {}): any;
        default?(_: {}): any;
        default?(_: {}): any;
    };
    refs: {};
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import("vue").DefineComponent<__VLS_Props, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<__VLS_Props> & Readonly<{}>, {
    size: "sm" | "md";
    variant: string;
    fullWidth: boolean;
    type: "button" | "submit" | "reset";
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=ScalarButton.vue.d.ts.map