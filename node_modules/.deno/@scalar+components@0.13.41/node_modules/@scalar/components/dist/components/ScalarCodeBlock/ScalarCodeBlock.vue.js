import { defineComponent as f, computed as s, openBlock as o, createElementBlock as n, unref as l, createElementVNode as a, createVNode as y, createCommentVNode as c } from "vue";
import { syntaxHighlight as b, standardLanguages as C } from "@scalar/code-highlight";
import { useClipboard as g } from "@scalar/use-hooks/useClipboard";
import { prettyPrintJson as i } from "../../helpers/oas-utils.js";
import h from "../ScalarIcon/ScalarIcon.vue.js";
const k = {
  class: "scalar-code-block custom-scroll min-h-12 focus-visible:outline",
  tabindex: "0"
}, N = {
  key: 0,
  class: "scalar-code-copy"
}, _ = ["innerHTML"], T = /* @__PURE__ */ f({
  __name: "ScalarCodeBlock",
  props: {
    content: {},
    lang: { default: "plaintext" },
    lineNumbers: { type: Boolean, default: !1 },
    hideCredentials: {},
    copy: { type: Boolean, default: !0 }
  },
  setup(d) {
    const e = d, u = s(() => b(i(e.content), {
      lang: e.lang.trim(),
      languages: C,
      lineNumbers: e.lineNumbers,
      maskCredentials: e.hideCredentials
    }).slice(5, -6)), { copyToClipboard: p } = g(), m = s(() => e.content !== null && e.content !== "null" && e.content !== "404 Not Found");
    return (r, t) => (o(), n("div", k, [
      r.copy ? (o(), n("div", N, [
        m.value ? (o(), n("button", {
          key: 0,
          class: "copy-button",
          type: "button",
          onClick: t[0] || (t[0] = (v) => l(p)(l(i)(e.content)))
        }, [
          t[1] || (t[1] = a("span", { class: "sr-only" }, "Copy content", -1)),
          y(l(h), {
            icon: "Clipboard",
            size: "md"
          })
        ])) : c("", !0)
      ])) : c("", !0),
      a("pre", {
        class: "scalar-codeblock-pre",
        innerHTML: u.value
      }, null, 8, _)
    ]));
  }
});
export {
  T as default
};
