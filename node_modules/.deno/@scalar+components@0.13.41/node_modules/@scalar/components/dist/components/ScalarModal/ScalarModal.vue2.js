import { defineComponent as p, openBlock as l, createBlock as r, unref as a, withCtx as o, createElementVNode as x, normalizeClass as t, createVNode as i, normalizeStyle as w, createTextVNode as b, toDisplayString as y, createCommentVNode as m, createElementBlock as n, renderSlot as d, reactive as g } from "vue";
import { Dialog as z, DialogPanel as k, DialogTitle as C, DialogDescription as D } from "@headlessui/vue";
import { cva as f, cx as c } from "../../cva.js";
import S from "../ScalarIconButton/ScalarIconButton.vue.js";
const $ = {
  key: 0,
  class: "close-button z-10 fixed right-2 top-2"
};
function E() {
  return g({
    open: !1,
    show() {
      this.open = !0;
    },
    hide() {
      this.open = !1;
    }
  });
}
const M = /* @__PURE__ */ p({
  __name: "ScalarModal",
  props: {
    state: {},
    title: {},
    bodyClass: {},
    maxWidth: {},
    size: { default: "md" },
    variant: {}
  },
  setup(N) {
    const v = f({
      base: [
        "scalar-modal",
        "flex flex-col relative mb-0 rounded-lg bg-b-1 p-0 text-left leading-snug text-c-1 opacity-0 w-[calc(100vw-12px)] md:w-[calc(100vw-16px)] lg:w-[calc(100vw-32px)]"
      ].join(" "),
      variants: {
        size: {
          xxs: "mt-[20svh] max-h-[60svh] max-w-screen-xxs",
          xs: "mt-[20svh] max-h-[60svh] max-w-screen-xs",
          sm: "mt-[20svh] max-h-[60svh] max-w-screen-sm",
          md: "mt-[20svh] max-h-[60svh] max-w-screen-md",
          lg: "m-auto max-h-[80svh] max-w-screen-lg",
          xl: "m-auto max-h-[90svh] max-w-screen-xl",
          full: "full-size-styles max-h-dvh mt-0 lg:w-full"
        },
        variant: {
          form: "scalar-modal-form",
          search: "scalar-modal-search mt-[15svh] max-h-[60svh] max-w-[540px]",
          error: "scalar-modal-error"
        }
      }
    }), u = f({
      base: ["scalar-modal-body", "relative flex-1 min-h-0 p-3"].join(" "),
      variants: {
        variant: {
          form: "overflow-visible",
          search: "col !m-0 overflow-hidden p-0",
          error: "overflow-y-scroll"
        },
        size: {
          xxs: "",
          xs: "",
          sm: "",
          md: "",
          lg: "",
          xl: "m-0 p-0",
          full: " rounded-none"
        }
      }
    });
    return (e, s) => (l(), r(a(z), {
      open: e.state.open,
      onClose: s[1] || (s[1] = (h) => e.state.hide())
    }, {
      default: o(() => [
        x("div", {
          class: t(
            a(c)(
              e.size === "full" ? "scalar-modal-layout-full" : "scalar-modal-layout",
              "fixed left-0 top-0 flex items-start justify-center",
              "z-[1001] h-[100dvh] w-[100dvw]",
              "bg-backdrop opacity-0 dark:bg-backdropdark",
              e.size === "full" && "flex"
            )
          )
        }, [
          i(a(k), {
            class: t(a(v)({ size: e.size, variant: e.variant })),
            style: w({ maxWidth: e.maxWidth })
          }, {
            default: o(() => [
              e.title ? (l(), r(a(C), {
                key: 0,
                class: "scalar-modal-header m-0 -mb-1 rounded-lg pt-3 px-3 text-left text-sm font-medium text-c-1"
              }, {
                default: o(() => [
                  b(y(e.title), 1)
                ]),
                _: 1
              })) : m("", !0),
              e.size === "full" ? (l(), n("div", {
                key: 1,
                class: t(e.bodyClass)
              }, [
                d(e.$slots, "default", {}, void 0, !0)
              ], 2)) : (l(), r(a(D), {
                key: 2,
                class: t(a(c)(a(u)({ size: e.size, variant: e.variant }), e.bodyClass))
              }, {
                default: o(() => [
                  d(e.$slots, "default", {}, void 0, !0)
                ]),
                _: 3
              }, 8, ["class"]))
            ]),
            _: 3
          }, 8, ["class", "style"]),
          e.size === "full" ? (l(), n("div", $, [
            i(a(S), {
              class: "hover:bg-b-3 focus:outline-none",
              icon: "Close",
              label: "Clear Search",
              onClose: s[0] || (s[0] = (h) => e.state.hide())
            })
          ])) : m("", !0)
        ], 2)
      ]),
      _: 3
    }, 8, ["open"]));
  }
});
export {
  M as default,
  E as useModal
};
