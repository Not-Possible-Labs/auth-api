import type { StoryObj } from '@storybook/vue3';
import type { Option, OptionGroup } from './types.js';
declare const meta: {
    component: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
            options: Option[] | OptionGroup[];
            modelValue?: Option;
            placeholder?: string;
        } & import("../ScalarFloating").ScalarFloatingOptions> & Readonly<{
            "onUpdate:modelValue"?: ((v: Option) => any) | undefined;
        }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
            "update:modelValue": (v: Option) => any;
        }, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            options: Option[] | OptionGroup[];
            modelValue?: Option;
            placeholder?: string;
        } & import("../ScalarFloating").ScalarFloatingOptions> & Readonly<{
            "onUpdate:modelValue"?: ((v: Option) => any) | undefined;
        }>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{
        options: Option[] | OptionGroup[];
        modelValue?: Option;
        placeholder?: string;
    } & import("../ScalarFloating").ScalarFloatingOptions> & Readonly<{
        "onUpdate:modelValue"?: ((v: Option) => any) | undefined;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
        "update:modelValue": (v: Option) => any;
    }, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: Readonly<{
            default(props: {
                open: boolean;
            }): import("vue").Slot;
            before?(props: {
                open: boolean;
            }): import("vue").Slot;
            after?(props: {
                open: boolean;
            }): import("vue").Slot;
        }> & {
            default(props: {
                open: boolean;
            }): import("vue").Slot;
            before?(props: {
                open: boolean;
            }): import("vue").Slot;
            after?(props: {
                open: boolean;
            }): import("vue").Slot;
        };
    });
    tags: string[];
    argTypes: {
        resize: {
            control: "boolean";
        };
        placement: {
            control: "select";
            options: import("@floating-ui/utils").Placement[];
        };
        class: {
            control: "text";
        };
    };
};
export default meta;
type Story = StoryObj<typeof meta>;
export declare const Base: Story;
export declare const Groups: Story;
export declare const Multiselect: Story;
export declare const MultiselectGroups: Story;
export declare const WithSlots: Story;
/**
 * Applies a custom class to the combobox popover
 */
export declare const CustomClasses: Story;
//# sourceMappingURL=ScalarCombobox.stories.d.ts.map