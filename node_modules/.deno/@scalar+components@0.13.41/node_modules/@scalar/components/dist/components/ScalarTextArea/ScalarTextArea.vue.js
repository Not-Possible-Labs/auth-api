import { defineComponent as d, useModel as f, onMounted as c, openBlock as p, createElementBlock as x, mergeProps as i, unref as r, withDirectives as v, createElementVNode as b, vModelText as _ } from "vue";
import { useTextareaAutosize as g } from "@vueuse/core";
import { useBindCx as h } from "../../hooks/useBindCx.js";
const k = {}, C = /* @__PURE__ */ d({
  ...k,
  inheritAttrs: !1,
  __name: "ScalarTextArea",
  props: {
    modelValue: {},
    modelModifiers: {}
  },
  emits: ["update:modelValue"],
  setup(a) {
    const t = f(a, "modelValue"), { textarea: o } = g({
      input: t,
      styleProp: "minHeight"
    }), { classCx: m, otherAttrs: s } = h();
    return c(() => {
      var n;
      "autofocus" in s.value && ((n = o.value) == null || n.focus());
    }), (n, e) => (p(), x("div", i(
      r(m)(
        "bg-b-1.5 custom-scroll flex min-h-0 shrink cursor-text items-center gap-0.75 rounded-md border px-3 py-2.5 outline-offset-[-1px] focus-within:bg-b-1 has-[input:focus-visible]:outline"
      ),
      {
        onClick: e[1] || (e[1] = (l) => {
          var u;
          return (u = r(o)) == null ? void 0 : u.focus();
        })
      }
    ), [
      v(b("textarea", i({
        ref_key: "textarea",
        ref: o,
        "onUpdate:modelValue": e[0] || (e[0] = (l) => t.value = l)
      }, r(s), { class: "w-full resize-none border-none bg-transparent text-sm focus-within:outline-none" }), null, 16), [
        [_, t.value]
      ])
    ], 16));
  }
});
export {
  C as default
};
