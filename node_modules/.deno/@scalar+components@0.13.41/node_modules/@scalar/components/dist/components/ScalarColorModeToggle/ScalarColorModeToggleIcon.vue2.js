import { defineComponent as a, computed as r, openBlock as i, createBlock as c, resolveDynamicComponent as u, mergeProps as m, unref as p, withCtx as g, createElementVNode as e } from "vue";
import { useBindCx as d } from "../../hooks/useBindCx.js";
const f = {}, _ = /* @__PURE__ */ a({
  ...f,
  inheritAttrs: !1,
  __name: "ScalarColorModeToggleIcon",
  props: {
    is: { default: "button" },
    mode: { default: "light" }
  },
  setup(l) {
    const { cx: n } = d(), s = r(
      () => l.mode === "dark" ? "Set light mode" : "Set dark mode"
    );
    return (o, t) => (i(), c(u(o.is), m({
      "aria-label": s.value,
      class: `toggle-icon-${o.mode}`,
      type: o.is === "button" ? "button" : void 0
    }, p(n)("size-3 flex items-center justify-center text-c-1")), {
      default: g(() => t[0] || (t[0] = [
        e("span", { class: "toggle-icon-sun-ray" }, null, -1),
        e("span", { class: "toggle-icon-sun-ray" }, null, -1),
        e("span", { class: "toggle-icon-sun-ray" }, null, -1),
        e("span", { class: "toggle-icon-sun-ray" }, null, -1),
        e("span", { class: "toggle-icon-ellipse" }, [
          e("span", { class: "toggle-icon-moon-mask" })
        ], -1)
      ])),
      _: 1
    }, 16, ["aria-label", "class", "type"]));
  }
});
export {
  _ as default
};
