import type { StoryObj } from '@storybook/vue3';
/**
 * - Default slot must be text only as it becomes the [aria]-label
 * - If you are looking for an icon only button, use ScalarIconButton instead, its a helpful wrapper around this component
 */
declare const meta: {
    component: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
            modelValue?: boolean;
            size?: "sm" | "md" | "lg";
            id?: string;
            label?: string;
        }> & Readonly<{
            "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
        }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
            "update:modelValue": (value: boolean) => any;
        }, import("vue").PublicProps, {
            size: "sm" | "md" | "lg";
            id: string;
        }, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, HTMLDivElement, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            modelValue?: boolean;
            size?: "sm" | "md" | "lg";
            id?: string;
            label?: string;
        }> & Readonly<{
            "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
        }>, {}, {}, {}, {}, {
            size: "sm" | "md" | "lg";
            id: string;
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{
        modelValue?: boolean;
        size?: "sm" | "md" | "lg";
        id?: string;
        label?: string;
    }> & Readonly<{
        "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
        "update:modelValue": (value: boolean) => any;
    }, string, {
        size: "sm" | "md" | "lg";
        id: string;
    }, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            default?(_: {}): any;
        };
    });
    tags: string[];
    argTypes: {
        modelValue: {
            control: "boolean";
            default: boolean;
        };
        size: {
            control: "select";
            options: string[];
        };
        label: {
            control: "text";
        };
    };
    render: (args: import("@storybook/vue3").ComponentPropsAndSlots<{
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
            modelValue?: boolean;
            size?: "sm" | "md" | "lg";
            id?: string;
            label?: string;
        }> & Readonly<{
            "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
        }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
            "update:modelValue": (value: boolean) => any;
        }, import("vue").PublicProps, {
            size: "sm" | "md" | "lg";
            id: string;
        }, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, HTMLDivElement, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            modelValue?: boolean;
            size?: "sm" | "md" | "lg";
            id?: string;
            label?: string;
        }> & Readonly<{
            "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
        }>, {}, {}, {}, {}, {
            size: "sm" | "md" | "lg";
            id: string;
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{
        modelValue?: boolean;
        size?: "sm" | "md" | "lg";
        id?: string;
        label?: string;
    }> & Readonly<{
        "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
    }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
        "update:modelValue": (value: boolean) => any;
    }, string, {
        size: "sm" | "md" | "lg";
        id: string;
    }, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            default?(_: {}): any;
        };
    })>) => {
        components: {
            ScalarCheckbox: {
                new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
                    modelValue?: boolean;
                    size?: "sm" | "md" | "lg";
                    id?: string;
                    label?: string;
                }> & Readonly<{
                    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
                }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
                    "update:modelValue": (value: boolean) => any;
                }, import("vue").PublicProps, {
                    size: "sm" | "md" | "lg";
                    id: string;
                }, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, HTMLDivElement, import("vue").ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<{
                    modelValue?: boolean;
                    size?: "sm" | "md" | "lg";
                    id?: string;
                    label?: string;
                }> & Readonly<{
                    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
                }>, {}, {}, {}, {}, {
                    size: "sm" | "md" | "lg";
                    id: string;
                }>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import("vue").ComponentOptionsBase<Readonly<{
                modelValue?: boolean;
                size?: "sm" | "md" | "lg";
                id?: string;
                label?: string;
            }> & Readonly<{
                "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
            }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
                "update:modelValue": (value: boolean) => any;
            }, string, {
                size: "sm" | "md" | "lg";
                id: string;
            }, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
                $slots: {
                    default?(_: {}): any;
                };
            });
        };
        setup(this: void): {
            args: import("@storybook/vue3").ComponentPropsAndSlots<{
                new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
                    modelValue?: boolean;
                    size?: "sm" | "md" | "lg";
                    id?: string;
                    label?: string;
                }> & Readonly<{
                    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
                }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
                    "update:modelValue": (value: boolean) => any;
                }, import("vue").PublicProps, {
                    size: "sm" | "md" | "lg";
                    id: string;
                }, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, HTMLDivElement, import("vue").ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<{
                    modelValue?: boolean;
                    size?: "sm" | "md" | "lg";
                    id?: string;
                    label?: string;
                }> & Readonly<{
                    "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
                }>, {}, {}, {}, {}, {
                    size: "sm" | "md" | "lg";
                    id: string;
                }>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import("vue").ComponentOptionsBase<Readonly<{
                modelValue?: boolean;
                size?: "sm" | "md" | "lg";
                id?: string;
                label?: string;
            }> & Readonly<{
                "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
            }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
                "update:modelValue": (value: boolean) => any;
            }, string, {
                size: "sm" | "md" | "lg";
                id: string;
            }, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
                $slots: {
                    default?(_: {}): any;
                };
            })>;
        };
        template: string;
    };
};
export default meta;
type Story = StoryObj<typeof meta>;
export declare const Base: Story;
export declare const WithLabel: Story;
//# sourceMappingURL=ScalarCheckbox.stories.d.ts.map