import type { StoryObj } from '@storybook/vue3';
declare const meta: {
    component: import("vue").DefineComponent<{
        icon?: import("./index.js").Icon;
        logo?: import("./utils/index.js").Logo;
        size?: "sm" | "lg" | "xs" | "md" | "xl" | "2xl" | "3xl" | "full" | undefined;
        thickness?: string;
        label?: string;
    }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{
        icon?: import("./index.js").Icon;
        logo?: import("./utils/index.js").Logo;
        size?: "sm" | "lg" | "xs" | "md" | "xl" | "2xl" | "3xl" | "full" | undefined;
        thickness?: string;
        label?: string;
    }> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
    tags: string[];
    argTypes: {
        icon: {
            control: "select";
            options: readonly ["Add", "AddTab", "Alert", "ArrowLeft", "ArrowRight", "Brackets", "Branch", "Changelog", "Checkmark", "ChevronDown", "ChevronLeft", "ChevronRight", "ChevronUp", "Clipboard", "Close", "CloseTab", "CloseTabs", "Cloud", "CodeFolder", "Cog", "Collection", "Cookie", "DarkMode", "Delete", "Discord", "DiscordLine", "DocsPage", "Download", "Duplicate", "Edit", "Ellipses", "Email", "Error", "Example", "ExternalLink", "FilterList", "Folder", "GitHub", "GitHubLine", "Globe", "Google", "Help", "Hide", "History", "House", "Import", "Info", "Key", "Leave", "LightDarkModeToggle", "LightMode", "Link", "Lock", "Logo", "LogoAPI", "LogoClient", "LogoMarket", "LogoSwagger", "Magic", "Markdown", "Menu", "NotAllowed", "Page", "PaperAirplane", "Pencil", "Play", "Refresh", "Roadmap", "Scribble", "Search", "Server", "Settings", "Show", "Sort", "Terminal", "ThumbsDown", "ThumbsUp", "Trash", "Unlock", "Unwatch", "Upload", "UploadSimple", "User", "UserSwitch", "Users", "Versions", "Wallet", "Watch", "Workspace", "programming-framework-angular", "programming-framework-astro", "programming-framework-laravel", "programming-framework-nextdotjs", "programming-framework-react", "programming-framework-vuedotjs", "programming-language-c", "programming-language-clojure", "programming-language-csharp", "programming-language-css3", "programming-language-dart", "programming-language-go", "programming-language-html5", "programming-language-http", "programming-language-java", "programming-language-javascript", "programming-language-json", "programming-language-kotlin", "programming-language-node", "programming-language-objc", "programming-language-ocaml", "programming-language-php", "programming-language-powershell", "programming-language-python", "programming-language-r", "programming-language-ruby", "programming-language-scala", "programming-language-shell", "programming-language-swift", "programming-language-typescript", "programming-script-code", "programming-tool-git", "programming-tool-tailwindcss"];
        };
        size: {
            control: "select";
            options: string[];
        };
        thickness: {
            control: {
                type: "range";
                min: number;
                max: number;
                step: number;
            };
        };
        class: {
            control: "text";
        };
        style: {
            control: "text";
        };
    };
    parameters: {
        docs: {
            description: {
                component: string;
            };
        };
    };
    render: (args: import("@storybook/vue3").ComponentPropsAndSlots<import("vue").DefineComponent<{
        icon?: import("./index.js").Icon;
        logo?: import("./utils/index.js").Logo;
        size?: "sm" | "lg" | "xs" | "md" | "xl" | "2xl" | "3xl" | "full" | undefined;
        thickness?: string;
        label?: string;
    }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{
        icon?: import("./index.js").Icon;
        logo?: import("./utils/index.js").Logo;
        size?: "sm" | "lg" | "xs" | "md" | "xl" | "2xl" | "3xl" | "full" | undefined;
        thickness?: string;
        label?: string;
    }> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>>) => {
        components: {
            ScalarIcon: import("vue").DefineComponent<{
                icon?: import("./index.js").Icon;
                logo?: import("./utils/index.js").Logo;
                size?: "sm" | "lg" | "xs" | "md" | "xl" | "2xl" | "3xl" | "full" | undefined;
                thickness?: string;
                label?: string;
            }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{
                icon?: import("./index.js").Icon;
                logo?: import("./utils/index.js").Logo;
                size?: "sm" | "lg" | "xs" | "md" | "xl" | "2xl" | "3xl" | "full" | undefined;
                thickness?: string;
                label?: string;
            }> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
        };
        setup(this: void): {
            args: import("@storybook/vue3").ComponentPropsAndSlots<import("vue").DefineComponent<{
                icon?: import("./index.js").Icon;
                logo?: import("./utils/index.js").Logo;
                size?: "sm" | "lg" | "xs" | "md" | "xl" | "2xl" | "3xl" | "full" | undefined;
                thickness?: string;
                label?: string;
            }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{
                icon?: import("./index.js").Icon;
                logo?: import("./utils/index.js").Logo;
                size?: "sm" | "lg" | "xs" | "md" | "xl" | "2xl" | "3xl" | "full" | undefined;
                thickness?: string;
                label?: string;
            }> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>>;
        };
        template: string;
    };
};
export default meta;
type Story = StoryObj<typeof meta>;
export declare const Base: Story;
export declare const CustomClasses: Story;
export declare const AllSizes: Story;
export declare const AllIcons: StoryObj;
//# sourceMappingURL=ScalarIcon.stories.d.ts.map