import type { StoryObj } from '@storybook/vue3';
/**
 * - Default slot must be text only as it becomes the [aria]-label
 * - If you are looking for an icon only button, use ScalarIconButton instead, its a helpful wrapper around this component
 */
declare const meta: {
    component: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
            disabled?: boolean;
            fullWidth?: boolean;
            loading?: import("../ScalarLoading").LoadingState | undefined;
            size?: import("./variants.js").Variants["size"];
            variant?: import("./variants.js").Variants["variant"];
            type?: "button" | "submit" | "reset";
        }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {
            size: "sm" | "md";
            variant: string;
            fullWidth: boolean;
            type: "button" | "submit" | "reset";
        }, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            disabled?: boolean;
            fullWidth?: boolean;
            loading?: import("../ScalarLoading").LoadingState | undefined;
            size?: import("./variants.js").Variants["size"];
            variant?: import("./variants.js").Variants["variant"];
            type?: "button" | "submit" | "reset";
        }> & Readonly<{}>, {}, {}, {}, {}, {
            size: "sm" | "md";
            variant: string;
            fullWidth: boolean;
            type: "button" | "submit" | "reset";
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{
        disabled?: boolean;
        fullWidth?: boolean;
        loading?: import("../ScalarLoading").LoadingState | undefined;
        size?: import("./variants.js").Variants["size"];
        variant?: import("./variants.js").Variants["variant"];
        type?: "button" | "submit" | "reset";
    }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
        size: "sm" | "md";
        variant: string;
        fullWidth: boolean;
        type: "button" | "submit" | "reset";
    }, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            icon?(_: {}): any;
            default?(_: {}): any;
            default?(_: {}): any;
        };
    });
    tags: string[];
    argTypes: {
        class: {
            control: "text";
        };
        size: {
            control: "select";
            options: string[];
        };
        variant: {
            control: "select";
            options: string[];
        };
        type: {
            control: "select";
            options: string[];
        };
    };
    render: (args: import("@storybook/vue3").ComponentPropsAndSlots<{
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
            disabled?: boolean;
            fullWidth?: boolean;
            loading?: import("../ScalarLoading").LoadingState | undefined;
            size?: import("./variants.js").Variants["size"];
            variant?: import("./variants.js").Variants["variant"];
            type?: "button" | "submit" | "reset";
        }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {
            size: "sm" | "md";
            variant: string;
            fullWidth: boolean;
            type: "button" | "submit" | "reset";
        }, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            disabled?: boolean;
            fullWidth?: boolean;
            loading?: import("../ScalarLoading").LoadingState | undefined;
            size?: import("./variants.js").Variants["size"];
            variant?: import("./variants.js").Variants["variant"];
            type?: "button" | "submit" | "reset";
        }> & Readonly<{}>, {}, {}, {}, {}, {
            size: "sm" | "md";
            variant: string;
            fullWidth: boolean;
            type: "button" | "submit" | "reset";
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{
        disabled?: boolean;
        fullWidth?: boolean;
        loading?: import("../ScalarLoading").LoadingState | undefined;
        size?: import("./variants.js").Variants["size"];
        variant?: import("./variants.js").Variants["variant"];
        type?: "button" | "submit" | "reset";
    }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
        size: "sm" | "md";
        variant: string;
        fullWidth: boolean;
        type: "button" | "submit" | "reset";
    }, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            icon?(_: {}): any;
            default?(_: {}): any;
            default?(_: {}): any;
        };
    })>) => {
        components: {
            ScalarButton: {
                new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
                    disabled?: boolean;
                    fullWidth?: boolean;
                    loading?: import("../ScalarLoading").LoadingState | undefined;
                    size?: import("./variants.js").Variants["size"];
                    variant?: import("./variants.js").Variants["variant"];
                    type?: "button" | "submit" | "reset";
                }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {
                    size: "sm" | "md";
                    variant: string;
                    fullWidth: boolean;
                    type: "button" | "submit" | "reset";
                }, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<{
                    disabled?: boolean;
                    fullWidth?: boolean;
                    loading?: import("../ScalarLoading").LoadingState | undefined;
                    size?: import("./variants.js").Variants["size"];
                    variant?: import("./variants.js").Variants["variant"];
                    type?: "button" | "submit" | "reset";
                }> & Readonly<{}>, {}, {}, {}, {}, {
                    size: "sm" | "md";
                    variant: string;
                    fullWidth: boolean;
                    type: "button" | "submit" | "reset";
                }>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import("vue").ComponentOptionsBase<Readonly<{
                disabled?: boolean;
                fullWidth?: boolean;
                loading?: import("../ScalarLoading").LoadingState | undefined;
                size?: import("./variants.js").Variants["size"];
                variant?: import("./variants.js").Variants["variant"];
                type?: "button" | "submit" | "reset";
            }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
                size: "sm" | "md";
                variant: string;
                fullWidth: boolean;
                type: "button" | "submit" | "reset";
            }, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
                $slots: {
                    icon?(_: {}): any;
                    default?(_: {}): any;
                    default?(_: {}): any;
                };
            });
        };
        setup(this: void): {
            args: import("@storybook/vue3").ComponentPropsAndSlots<{
                new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
                    disabled?: boolean;
                    fullWidth?: boolean;
                    loading?: import("../ScalarLoading").LoadingState | undefined;
                    size?: import("./variants.js").Variants["size"];
                    variant?: import("./variants.js").Variants["variant"];
                    type?: "button" | "submit" | "reset";
                }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {
                    size: "sm" | "md";
                    variant: string;
                    fullWidth: boolean;
                    type: "button" | "submit" | "reset";
                }, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<{
                    disabled?: boolean;
                    fullWidth?: boolean;
                    loading?: import("../ScalarLoading").LoadingState | undefined;
                    size?: import("./variants.js").Variants["size"];
                    variant?: import("./variants.js").Variants["variant"];
                    type?: "button" | "submit" | "reset";
                }> & Readonly<{}>, {}, {}, {}, {}, {
                    size: "sm" | "md";
                    variant: string;
                    fullWidth: boolean;
                    type: "button" | "submit" | "reset";
                }>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import("vue").ComponentOptionsBase<Readonly<{
                disabled?: boolean;
                fullWidth?: boolean;
                loading?: import("../ScalarLoading").LoadingState | undefined;
                size?: import("./variants.js").Variants["size"];
                variant?: import("./variants.js").Variants["variant"];
                type?: "button" | "submit" | "reset";
            }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
                size: "sm" | "md";
                variant: string;
                fullWidth: boolean;
                type: "button" | "submit" | "reset";
            }, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
                $slots: {
                    icon?(_: {}): any;
                    default?(_: {}): any;
                    default?(_: {}): any;
                };
            })>;
        };
        template: string;
    };
};
export default meta;
type Story = StoryObj<typeof meta>;
export declare const Base: Story;
export declare const FullWidth: Story;
export declare const Ghost: Story;
export declare const Danger: Story;
export declare const Disabled: Story;
export declare const Loading: Story;
export declare const LoadingFullWidth: Story;
export declare const WithIcon: Story;
export declare const CustomClasses: Story;
//# sourceMappingURL=ScalarButton.stories.d.ts.map