import type { StoryObj } from '@storybook/vue3';
declare const meta: {
    component: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("../ScalarFloating").ScalarFloatingOptions> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import("../ScalarFloating").ScalarFloatingOptions> & Readonly<{}>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<import("../ScalarFloating").ScalarFloatingOptions> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: Readonly<{
            default(props: {
                open: boolean;
            }): any;
            items(props: {
                open: boolean;
            }): any;
        }> & {
            default(props: {
                open: boolean;
            }): any;
            items(props: {
                open: boolean;
            }): any;
        };
    });
    tags: string[];
    argTypes: {
        resize: {
            control: "boolean";
        };
        placement: {
            control: "select";
            options: import("@floating-ui/utils").Placement[];
        };
        class: {
            control: "text";
        };
    };
    render: (args: import("@storybook/vue3").ComponentPropsAndSlots<{
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("../ScalarFloating").ScalarFloatingOptions> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import("../ScalarFloating").ScalarFloatingOptions> & Readonly<{}>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<import("../ScalarFloating").ScalarFloatingOptions> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: Readonly<{
            default(props: {
                open: boolean;
            }): any;
            items(props: {
                open: boolean;
            }): any;
        }> & {
            default(props: {
                open: boolean;
            }): any;
            items(props: {
                open: boolean;
            }): any;
        };
    })>) => {
        components: {
            ScalarDropdown: {
                new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("../ScalarFloating").ScalarFloatingOptions> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<import("../ScalarFloating").ScalarFloatingOptions> & Readonly<{}>, {}, {}, {}, {}, {}>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import("vue").ComponentOptionsBase<Readonly<import("../ScalarFloating").ScalarFloatingOptions> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
                $slots: Readonly<{
                    default(props: {
                        open: boolean;
                    }): any;
                    items(props: {
                        open: boolean;
                    }): any;
                }> & {
                    default(props: {
                        open: boolean;
                    }): any;
                    items(props: {
                        open: boolean;
                    }): any;
                };
            });
            ScalarDropdownItem: {
                new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
                    disabled?: boolean;
                }> & Readonly<{
                    onClick?: ((event: MouseEvent) => any) | undefined;
                }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
                    click: (event: MouseEvent) => any;
                }, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<{
                    disabled?: boolean;
                }> & Readonly<{
                    onClick?: ((event: MouseEvent) => any) | undefined;
                }>, {}, {}, {}, {}, {}>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import("vue").ComponentOptionsBase<Readonly<{
                disabled?: boolean;
            }> & Readonly<{
                onClick?: ((event: MouseEvent) => any) | undefined;
            }>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
                click: (event: MouseEvent) => any;
            }, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
                $slots: {
                    default?(_: {}): any;
                };
            });
            ScalarDropdownDivider: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
            ScalarButton: {
                new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
                    disabled?: boolean;
                    fullWidth?: boolean;
                    loading?: import("../ScalarLoading").LoadingState | undefined;
                    size?: import("../ScalarButton/variants.js").Variants["size"];
                    variant?: import("../ScalarButton/variants.js").Variants["variant"];
                    type?: "button" | "submit" | "reset";
                }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {
                    size: "sm" | "md";
                    variant: string;
                    fullWidth: boolean;
                    type: "button" | "submit" | "reset";
                }, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<{
                    disabled?: boolean;
                    fullWidth?: boolean;
                    loading?: import("../ScalarLoading").LoadingState | undefined;
                    size?: import("../ScalarButton/variants.js").Variants["size"];
                    variant?: import("../ScalarButton/variants.js").Variants["variant"];
                    type?: "button" | "submit" | "reset";
                }> & Readonly<{}>, {}, {}, {}, {}, {
                    size: "sm" | "md";
                    variant: string;
                    fullWidth: boolean;
                    type: "button" | "submit" | "reset";
                }>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import("vue").ComponentOptionsBase<Readonly<{
                disabled?: boolean;
                fullWidth?: boolean;
                loading?: import("../ScalarLoading").LoadingState | undefined;
                size?: import("../ScalarButton/variants.js").Variants["size"];
                variant?: import("../ScalarButton/variants.js").Variants["variant"];
                type?: "button" | "submit" | "reset";
            }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
                size: "sm" | "md";
                variant: string;
                fullWidth: boolean;
                type: "button" | "submit" | "reset";
            }, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
                $slots: {
                    icon?(_: {}): any;
                    default?(_: {}): any;
                    default?(_: {}): any;
                };
            });
        };
        setup(this: void): {
            args: import("@storybook/vue3").ComponentPropsAndSlots<{
                new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("../ScalarFloating").ScalarFloatingOptions> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<import("../ScalarFloating").ScalarFloatingOptions> & Readonly<{}>, {}, {}, {}, {}, {}>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import("vue").ComponentOptionsBase<Readonly<import("../ScalarFloating").ScalarFloatingOptions> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
                $slots: Readonly<{
                    default(props: {
                        open: boolean;
                    }): any;
                    items(props: {
                        open: boolean;
                    }): any;
                }> & {
                    default(props: {
                        open: boolean;
                    }): any;
                    items(props: {
                        open: boolean;
                    }): any;
                };
            })>;
        };
        template: string;
    };
};
export default meta;
type Story = StoryObj<typeof meta>;
export declare const Base: Story;
export declare const CustomClasses: Story;
//# sourceMappingURL=ScalarDropdown.stories.d.ts.map