import type { StoryObj } from '@storybook/vue3';
declare const meta: {
    component: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
            align?: "start" | "center" | "end";
            side?: "top" | "right" | "bottom" | "left";
            sideOffset?: number;
            disabled?: boolean;
            triggerClass?: string;
        }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {
            disabled: boolean;
            align: "start" | "center" | "end";
            side: "top" | "right" | "bottom" | "left";
        }, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            align?: "start" | "center" | "end";
            side?: "top" | "right" | "bottom" | "left";
            sideOffset?: number;
            disabled?: boolean;
            triggerClass?: string;
        }> & Readonly<{}>, {}, {}, {}, {}, {
            disabled: boolean;
            align: "start" | "center" | "end";
            side: "top" | "right" | "bottom" | "left";
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{
        align?: "start" | "center" | "end";
        side?: "top" | "right" | "bottom" | "left";
        sideOffset?: number;
        disabled?: boolean;
        triggerClass?: string;
    }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
        disabled: boolean;
        align: "start" | "center" | "end";
        side: "top" | "right" | "bottom" | "left";
    }, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            trigger?(_: {}): any;
            content?(_: {}): any;
        };
    });
    tags: string[];
    argTypes: {
        side: {
            control: "select";
            options: string[];
        };
        sideOffset: {
            control: "number";
        };
        class: {
            control: "text";
        };
    };
    render: (args: import("@storybook/vue3").ComponentPropsAndSlots<{
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
            align?: "start" | "center" | "end";
            side?: "top" | "right" | "bottom" | "left";
            sideOffset?: number;
            disabled?: boolean;
            triggerClass?: string;
        }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {
            disabled: boolean;
            align: "start" | "center" | "end";
            side: "top" | "right" | "bottom" | "left";
        }, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{
            align?: "start" | "center" | "end";
            side?: "top" | "right" | "bottom" | "left";
            sideOffset?: number;
            disabled?: boolean;
            triggerClass?: string;
        }> & Readonly<{}>, {}, {}, {}, {}, {
            disabled: boolean;
            align: "start" | "center" | "end";
            side: "top" | "right" | "bottom" | "left";
        }>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{
        align?: "start" | "center" | "end";
        side?: "top" | "right" | "bottom" | "left";
        sideOffset?: number;
        disabled?: boolean;
        triggerClass?: string;
    }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
        disabled: boolean;
        align: "start" | "center" | "end";
        side: "top" | "right" | "bottom" | "left";
    }, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: {
            trigger?(_: {}): any;
            content?(_: {}): any;
        };
    })>) => {
        components: {
            ScalarContextMenu: {
                new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
                    align?: "start" | "center" | "end";
                    side?: "top" | "right" | "bottom" | "left";
                    sideOffset?: number;
                    disabled?: boolean;
                    triggerClass?: string;
                }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {
                    disabled: boolean;
                    align: "start" | "center" | "end";
                    side: "top" | "right" | "bottom" | "left";
                }, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<{
                    align?: "start" | "center" | "end";
                    side?: "top" | "right" | "bottom" | "left";
                    sideOffset?: number;
                    disabled?: boolean;
                    triggerClass?: string;
                }> & Readonly<{}>, {}, {}, {}, {}, {
                    disabled: boolean;
                    align: "start" | "center" | "end";
                    side: "top" | "right" | "bottom" | "left";
                }>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import("vue").ComponentOptionsBase<Readonly<{
                align?: "start" | "center" | "end";
                side?: "top" | "right" | "bottom" | "left";
                sideOffset?: number;
                disabled?: boolean;
                triggerClass?: string;
            }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
                disabled: boolean;
                align: "start" | "center" | "end";
                side: "top" | "right" | "bottom" | "left";
            }, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
                $slots: {
                    trigger?(_: {}): any;
                    content?(_: {}): any;
                };
            });
            ScalarButton: {
                new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
                    disabled?: boolean;
                    fullWidth?: boolean;
                    loading?: import("../ScalarLoading").LoadingState | undefined;
                    size?: import("../ScalarButton/variants.js").Variants["size"];
                    variant?: import("../ScalarButton/variants.js").Variants["variant"];
                    type?: "button" | "submit" | "reset";
                }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {
                    size: "sm" | "md";
                    variant: string;
                    fullWidth: boolean;
                    type: "button" | "submit" | "reset";
                }, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<{
                    disabled?: boolean;
                    fullWidth?: boolean;
                    loading?: import("../ScalarLoading").LoadingState | undefined;
                    size?: import("../ScalarButton/variants.js").Variants["size"];
                    variant?: import("../ScalarButton/variants.js").Variants["variant"];
                    type?: "button" | "submit" | "reset";
                }> & Readonly<{}>, {}, {}, {}, {}, {
                    size: "sm" | "md";
                    variant: string;
                    fullWidth: boolean;
                    type: "button" | "submit" | "reset";
                }>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import("vue").ComponentOptionsBase<Readonly<{
                disabled?: boolean;
                fullWidth?: boolean;
                loading?: import("../ScalarLoading").LoadingState | undefined;
                size?: import("../ScalarButton/variants.js").Variants["size"];
                variant?: import("../ScalarButton/variants.js").Variants["variant"];
                type?: "button" | "submit" | "reset";
            }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
                size: "sm" | "md";
                variant: string;
                fullWidth: boolean;
                type: "button" | "submit" | "reset";
            }, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
                $slots: {
                    icon?(_: {}): any;
                    default?(_: {}): any;
                    default?(_: {}): any;
                };
            });
        };
        setup(this: void): {
            args: import("@storybook/vue3").ComponentPropsAndSlots<{
                new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
                    align?: "start" | "center" | "end";
                    side?: "top" | "right" | "bottom" | "left";
                    sideOffset?: number;
                    disabled?: boolean;
                    triggerClass?: string;
                }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {
                    disabled: boolean;
                    align: "start" | "center" | "end";
                    side: "top" | "right" | "bottom" | "left";
                }, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<{
                    align?: "start" | "center" | "end";
                    side?: "top" | "right" | "bottom" | "left";
                    sideOffset?: number;
                    disabled?: boolean;
                    triggerClass?: string;
                }> & Readonly<{}>, {}, {}, {}, {}, {
                    disabled: boolean;
                    align: "start" | "center" | "end";
                    side: "top" | "right" | "bottom" | "left";
                }>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import("vue").ComponentOptionsBase<Readonly<{
                align?: "start" | "center" | "end";
                side?: "top" | "right" | "bottom" | "left";
                sideOffset?: number;
                disabled?: boolean;
                triggerClass?: string;
            }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
                disabled: boolean;
                align: "start" | "center" | "end";
                side: "top" | "right" | "bottom" | "left";
            }, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
                $slots: {
                    trigger?(_: {}): any;
                    content?(_: {}): any;
                };
            })>;
        };
        template: string;
    };
};
export default meta;
type Story = StoryObj<typeof meta>;
export declare const Base: Story;
//# sourceMappingURL=ScalarContextMenu.stories.d.ts.map