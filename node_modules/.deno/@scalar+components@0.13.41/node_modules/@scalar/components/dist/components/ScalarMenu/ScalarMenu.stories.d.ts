import type { StoryObj } from '@storybook/vue3';
declare const meta: {
    component: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: Readonly<{
            button?: (p: import("./types").ScalarMenuButtonProps) => any;
            products?: (p: import("./types").ScalarMenuSlotProps) => any;
            profile?: (p: import("./types").ScalarMenuSlotProps) => any;
            sections?: (p: import("./types").ScalarMenuSlotProps) => any;
        } & import("./types").ScalarMenuButtonSlots> & {
            button?: (p: import("./types").ScalarMenuButtonProps) => any;
            products?: (p: import("./types").ScalarMenuSlotProps) => any;
            profile?: (p: import("./types").ScalarMenuSlotProps) => any;
            sections?: (p: import("./types").ScalarMenuSlotProps) => any;
        } & import("./types").ScalarMenuButtonSlots;
    });
    tags: string[];
    argTypes: {
        logo: {
            control: {
                type: "text";
            };
        };
        label: {
            control: {
                type: "text";
            };
        };
    };
    render: (args: import("@storybook/vue3").ComponentPropsAndSlots<{
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: Readonly<{
            button?: (p: import("./types").ScalarMenuButtonProps) => any;
            products?: (p: import("./types").ScalarMenuSlotProps) => any;
            profile?: (p: import("./types").ScalarMenuSlotProps) => any;
            sections?: (p: import("./types").ScalarMenuSlotProps) => any;
        } & import("./types").ScalarMenuButtonSlots> & {
            button?: (p: import("./types").ScalarMenuButtonProps) => any;
            products?: (p: import("./types").ScalarMenuSlotProps) => any;
            profile?: (p: import("./types").ScalarMenuSlotProps) => any;
            sections?: (p: import("./types").ScalarMenuSlotProps) => any;
        } & import("./types").ScalarMenuButtonSlots;
    })>) => {
        components: {
            ScalarMenu: {
                new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, {}>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import("vue").ComponentOptionsBase<Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
                $slots: Readonly<{
                    button?: (p: import("./types").ScalarMenuButtonProps) => any;
                    products?: (p: import("./types").ScalarMenuSlotProps) => any;
                    profile?: (p: import("./types").ScalarMenuSlotProps) => any;
                    sections?: (p: import("./types").ScalarMenuSlotProps) => any;
                } & import("./types").ScalarMenuButtonSlots> & {
                    button?: (p: import("./types").ScalarMenuButtonProps) => any;
                    products?: (p: import("./types").ScalarMenuSlotProps) => any;
                    profile?: (p: import("./types").ScalarMenuSlotProps) => any;
                    sections?: (p: import("./types").ScalarMenuSlotProps) => any;
                } & import("./types").ScalarMenuButtonSlots;
            });
        };
        setup(this: void): {
            args: import("@storybook/vue3").ComponentPropsAndSlots<{
                new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, {}>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import("vue").ComponentOptionsBase<Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
                $slots: Readonly<{
                    button?: (p: import("./types").ScalarMenuButtonProps) => any;
                    products?: (p: import("./types").ScalarMenuSlotProps) => any;
                    profile?: (p: import("./types").ScalarMenuSlotProps) => any;
                    sections?: (p: import("./types").ScalarMenuSlotProps) => any;
                } & import("./types").ScalarMenuButtonSlots> & {
                    button?: (p: import("./types").ScalarMenuButtonProps) => any;
                    products?: (p: import("./types").ScalarMenuSlotProps) => any;
                    profile?: (p: import("./types").ScalarMenuSlotProps) => any;
                    sections?: (p: import("./types").ScalarMenuSlotProps) => any;
                } & import("./types").ScalarMenuButtonSlots;
            })>;
        };
        template: string;
    };
};
export default meta;
type Story = StoryObj<typeof meta>;
export declare const Base: Story;
export declare const TeamPicker: Story;
export declare const CustomLogo: Story;
export declare const CustomButton: Story;
//# sourceMappingURL=ScalarMenu.stories.d.ts.map