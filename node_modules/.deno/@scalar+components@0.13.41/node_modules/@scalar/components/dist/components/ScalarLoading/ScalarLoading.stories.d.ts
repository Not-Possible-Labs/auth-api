import type { StoryObj } from '@storybook/vue3';
/**
 * To use the loading, you must pass in a loadingState which can be created using the useLoadingState hook exported from this component
 */
declare const meta: {
    component: import("vue").DefineComponent<{
        loadingState?: import("./ScalarLoading.vue.js").LoadingState;
        size?: "sm" | "lg" | "xs" | "md" | "xl" | "2xl" | "3xl" | "full" | undefined;
    }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{
        loadingState?: import("./ScalarLoading.vue.js").LoadingState;
        size?: "sm" | "lg" | "xs" | "md" | "xl" | "2xl" | "3xl" | "full" | undefined;
    }> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
    tags: string[];
    argTypes: {
        class: {
            control: "text";
        };
        size: {
            control: "select";
            options: string[];
        };
    };
    render: (args: import("@storybook/vue3").ComponentPropsAndSlots<import("vue").DefineComponent<{
        loadingState?: import("./ScalarLoading.vue.js").LoadingState;
        size?: "sm" | "lg" | "xs" | "md" | "xl" | "2xl" | "3xl" | "full" | undefined;
    }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{
        loadingState?: import("./ScalarLoading.vue.js").LoadingState;
        size?: "sm" | "lg" | "xs" | "md" | "xl" | "2xl" | "3xl" | "full" | undefined;
    }> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>>) => {
        components: {
            ScalarButton: {
                new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<{
                    disabled?: boolean;
                    fullWidth?: boolean;
                    loading?: import("./ScalarLoading.vue.js").LoadingState | undefined;
                    size?: import("../ScalarButton/variants.js").Variants["size"];
                    variant?: import("../ScalarButton/variants.js").Variants["variant"];
                    type?: "button" | "submit" | "reset";
                }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {
                    size: "sm" | "md";
                    variant: string;
                    fullWidth: boolean;
                    type: "button" | "submit" | "reset";
                }, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
                    P: {};
                    B: {};
                    D: {};
                    C: {};
                    M: {};
                    Defaults: {};
                }, Readonly<{
                    disabled?: boolean;
                    fullWidth?: boolean;
                    loading?: import("./ScalarLoading.vue.js").LoadingState | undefined;
                    size?: import("../ScalarButton/variants.js").Variants["size"];
                    variant?: import("../ScalarButton/variants.js").Variants["variant"];
                    type?: "button" | "submit" | "reset";
                }> & Readonly<{}>, {}, {}, {}, {}, {
                    size: "sm" | "md";
                    variant: string;
                    fullWidth: boolean;
                    type: "button" | "submit" | "reset";
                }>;
                __isFragment?: never;
                __isTeleport?: never;
                __isSuspense?: never;
            } & import("vue").ComponentOptionsBase<Readonly<{
                disabled?: boolean;
                fullWidth?: boolean;
                loading?: import("./ScalarLoading.vue.js").LoadingState | undefined;
                size?: import("../ScalarButton/variants.js").Variants["size"];
                variant?: import("../ScalarButton/variants.js").Variants["variant"];
                type?: "button" | "submit" | "reset";
            }> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
                size: "sm" | "md";
                variant: string;
                fullWidth: boolean;
                type: "button" | "submit" | "reset";
            }, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
                $slots: {
                    icon?(_: {}): any;
                    default?(_: {}): any;
                    default?(_: {}): any;
                };
            });
            ScalarLoading: import("vue").DefineComponent<{
                loadingState?: import("./ScalarLoading.vue.js").LoadingState;
                size?: "sm" | "lg" | "xs" | "md" | "xl" | "2xl" | "3xl" | "full" | undefined;
            }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{
                loadingState?: import("./ScalarLoading.vue.js").LoadingState;
                size?: "sm" | "lg" | "xs" | "md" | "xl" | "2xl" | "3xl" | "full" | undefined;
            }> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
        };
        setup(this: void): {
            args: import("@storybook/vue3").ComponentPropsAndSlots<import("vue").DefineComponent<{
                loadingState?: import("./ScalarLoading.vue.js").LoadingState;
                size?: "sm" | "lg" | "xs" | "md" | "xl" | "2xl" | "3xl" | "full" | undefined;
            }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{
                loadingState?: import("./ScalarLoading.vue.js").LoadingState;
                size?: "sm" | "lg" | "xs" | "md" | "xl" | "2xl" | "3xl" | "full" | undefined;
            }> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>>;
            loadingState: {
                isValid: boolean;
                isInvalid: boolean;
                isLoading: boolean;
                startLoading: () => void;
                stopLoading: () => void;
                validate: (time?: number, clear?: boolean) => Promise<unknown>;
                invalidate: (time?: number, clear?: boolean) => Promise<unknown>;
                clear: (time?: number) => Promise<unknown>;
            };
        };
        template: string;
    };
};
export default meta;
type Story = StoryObj<typeof meta>;
export declare const Base: Story;
export declare const CustomClasses: Story;
//# sourceMappingURL=ScalarLoading.stories.d.ts.map