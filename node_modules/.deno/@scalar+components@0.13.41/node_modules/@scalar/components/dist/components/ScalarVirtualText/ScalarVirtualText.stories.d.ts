import type { StoryObj } from '@storybook/vue3';
declare const meta: {
    component: import("vue").DefineComponent<{
        text: string;
        lineHeight?: number;
        containerClass?: string;
        contentClass?: string;
        lineClass?: string;
    }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{
        text: string;
        lineHeight?: number;
        containerClass?: string;
        contentClass?: string;
        lineClass?: string;
    }> & Readonly<{}>, {
        lineHeight: number;
        containerClass: string;
        contentClass: string;
        lineClass: string;
    }, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, HTMLDivElement>;
    tags: string[];
    argTypes: {
        text: {
            control: "text";
        };
        lineHeight: {
            control: "number";
        };
    };
    render: (args: import("@storybook/vue3").ComponentPropsAndSlots<import("vue").DefineComponent<{
        text: string;
        lineHeight?: number;
        containerClass?: string;
        contentClass?: string;
        lineClass?: string;
    }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{
        text: string;
        lineHeight?: number;
        containerClass?: string;
        contentClass?: string;
        lineClass?: string;
    }> & Readonly<{}>, {
        lineHeight: number;
        containerClass: string;
        contentClass: string;
        lineClass: string;
    }, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, HTMLDivElement>>) => {
        components: {
            ScalarVirtualText: import("vue").DefineComponent<{
                text: string;
                lineHeight?: number;
                containerClass?: string;
                contentClass?: string;
                lineClass?: string;
            }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{
                text: string;
                lineHeight?: number;
                containerClass?: string;
                contentClass?: string;
                lineClass?: string;
            }> & Readonly<{}>, {
                lineHeight: number;
                containerClass: string;
                contentClass: string;
                lineClass: string;
            }, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, HTMLDivElement>;
        };
        setup(this: void): {
            args: import("@storybook/vue3").ComponentPropsAndSlots<import("vue").DefineComponent<{
                text: string;
                lineHeight?: number;
                containerClass?: string;
                contentClass?: string;
                lineClass?: string;
            }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{
                text: string;
                lineHeight?: number;
                containerClass?: string;
                contentClass?: string;
                lineClass?: string;
            }> & Readonly<{}>, {
                lineHeight: number;
                containerClass: string;
                contentClass: string;
                lineClass: string;
            }, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, HTMLDivElement>>;
        };
        template: string;
    };
};
export default meta;
type Story = StoryObj<typeof meta>;
export declare const Base: Story;
//# sourceMappingURL=ScalarVirtualText.stories.d.ts.map