import { type ScalarFloatingOptions } from '../ScalarFloating';
import type { Option } from './types';
type SingleSelectListboxProps = {
    multiple?: false | undefined;
    modelValue?: Option | undefined;
};
type MultipleSelectListboxProps = {
    multiple: true;
    modelValue?: Option[] | undefined;
};
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Readonly<{
        /** The reference element for the listbox */
        default(props: {
            /** Whether or not the listbox is open */
            open: boolean;
        }): any;
    }> & {
        /** The reference element for the listbox */
        default(props: {
            /** Whether or not the listbox is open */
            open: boolean;
        }): any;
    };
    refs: {};
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import("vue").DefineComponent<({
    options: Option[];
    id?: string;
    label?: string;
} & SingleSelectListboxProps & ScalarFloatingOptions) | ({
    options: Option[];
    id?: string;
    label?: string;
} & MultipleSelectListboxProps & ScalarFloatingOptions), {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
    "update:modelValue": (v: Option) => any;
}, string, import("vue").PublicProps, Readonly<({
    options: Option[];
    id?: string;
    label?: string;
} & SingleSelectListboxProps & ScalarFloatingOptions) | ({
    options: Option[];
    id?: string;
    label?: string;
} & MultipleSelectListboxProps & ScalarFloatingOptions)> & Readonly<{
    "onUpdate:modelValue"?: ((v: Option) => any) | undefined;
}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=ScalarListbox.vue.d.ts.map