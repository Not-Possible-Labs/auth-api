import type { StoryObj } from '@storybook/vue3';
/**
 * Syntax highlighting in a light weight component
 */
declare const meta: {
    component: import("vue").DefineComponent<{
        value?: string;
        withImages?: boolean;
        transform?: (node: Record<string, any>) => Record<string, any>;
        transformType?: string;
        clamp?: string | boolean;
    }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{
        value?: string;
        withImages?: boolean;
        transform?: (node: Record<string, any>) => Record<string, any>;
        transformType?: string;
        clamp?: string | boolean;
    }> & Readonly<{}>, {
        withImages: boolean;
    }, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, HTMLDivElement>;
    tags: string[];
    render: (args: import("@storybook/vue3").ComponentPropsAndSlots<import("vue").DefineComponent<{
        value?: string;
        withImages?: boolean;
        transform?: (node: Record<string, any>) => Record<string, any>;
        transformType?: string;
        clamp?: string | boolean;
    }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{
        value?: string;
        withImages?: boolean;
        transform?: (node: Record<string, any>) => Record<string, any>;
        transformType?: string;
        clamp?: string | boolean;
    }> & Readonly<{}>, {
        withImages: boolean;
    }, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, HTMLDivElement>>) => {
        components: {
            ScalarMarkdown: import("vue").DefineComponent<{
                value?: string;
                withImages?: boolean;
                transform?: (node: Record<string, any>) => Record<string, any>;
                transformType?: string;
                clamp?: string | boolean;
            }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{
                value?: string;
                withImages?: boolean;
                transform?: (node: Record<string, any>) => Record<string, any>;
                transformType?: string;
                clamp?: string | boolean;
            }> & Readonly<{}>, {
                withImages: boolean;
            }, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, HTMLDivElement>;
        };
        setup(this: void): {
            args: import("@storybook/vue3").ComponentPropsAndSlots<import("vue").DefineComponent<{
                value?: string;
                withImages?: boolean;
                transform?: (node: Record<string, any>) => Record<string, any>;
                transformType?: string;
                clamp?: string | boolean;
            }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{
                value?: string;
                withImages?: boolean;
                transform?: (node: Record<string, any>) => Record<string, any>;
                transformType?: string;
                clamp?: string | boolean;
            }> & Readonly<{}>, {
                withImages: boolean;
            }, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, HTMLDivElement>>;
        };
        template: string;
    };
};
export default meta;
type Story = StoryObj<typeof meta>;
export declare const Base: Story;
//# sourceMappingURL=ScalarMarkdown.stories.d.ts.map