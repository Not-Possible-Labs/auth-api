import { defineComponent as d, mergeModels as p, useModel as c, openBlock as i, createElementBlock as f, renderSlot as a, unref as t, createVNode as r, withCtx as n, createBlock as v, resolveDynamicComponent as _, normalizeProps as x, mergeProps as b, createCommentVNode as C } from "vue";
import { useBindCx as S } from "../../hooks/useBindCx.js";
import $ from "./ScalarSidebarButton.vue.js";
import g from "./ScalarSidebarGroupToggle.vue.js";
import k from "./ScalarSidebarIndent.vue.js";
import { useSidebarGroups as B } from "./useSidebarGroups.js";
const V = { class: "group/item contents" }, y = {}, A = /* @__PURE__ */ d({
  ...y,
  inheritAttrs: !1,
  __name: "ScalarSidebarGroup",
  props: /* @__PURE__ */ p({
    is: { default: "ul" }
  }, {
    modelValue: { type: Boolean },
    modelModifiers: {}
  }),
  emits: ["update:modelValue"],
  setup(u) {
    const e = c(u, "modelValue"), { level: l } = B({ increment: !0 }), { cx: m } = S();
    return (o, s) => (i(), f("li", V, [
      a(o.$slots, "button", {
        level: t(l),
        open: !!e.value
      }, () => [
        r($, {
          is: "button",
          "aria-expanded": e.value,
          class: "text-c-1 bg-b-1",
          indent: t(l),
          onClick: s[0] || (s[0] = (M) => e.value = !e.value)
        }, {
          indent: n(() => [
            r(k, {
              class: "mr-0",
              indent: t(l)
            }, null, 8, ["indent"])
          ]),
          icon: n(() => [
            r(g, {
              class: "text-c-3",
              open: e.value
            }, null, 8, ["open"])
          ]),
          default: n(() => [
            a(o.$slots, "default", {
              open: !!e.value
            })
          ]),
          _: 3
        }, 8, ["aria-expanded", "indent"])
      ]),
      e.value ? (i(), v(_(o.is), x(b({ key: 0 }, t(m)("flex flex-col gap-px"))), {
        default: n(() => [
          a(o.$slots, "items", {
            open: !!e.value
          })
        ]),
        _: 3
      }, 16)) : C("", !0)
    ]));
  }
});
export {
  A as default
};
