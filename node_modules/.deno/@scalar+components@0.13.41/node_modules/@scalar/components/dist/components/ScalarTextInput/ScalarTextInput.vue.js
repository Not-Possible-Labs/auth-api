import { defineComponent as h, useModel as v, ref as _, onMounted as $, openBlock as s, createElementBlock as t, mergeProps as p, unref as c, createElementVNode as o, renderSlot as l, createCommentVNode as i, withDirectives as b, vModelDynamic as w, toDisplayString as g } from "vue";
import { useBindCx as k } from "../../hooks/useBindCx.js";
const y = { class: "flex flex-1 gap-2 font-normal" }, V = { class: "flex flex-1 flex-col gap-0.75" }, C = { class: "relative flex" }, M = {
  key: 0,
  class: "select-none whitespace-nowrap text-sm text-transparent"
}, B = {
  key: 1,
  class: "absolute inset-0 select-none overflow-hidden whitespace-nowrap text-sm"
}, D = {
  key: 0,
  class: "text-c-2"
}, S = { class: "text-transparent" }, A = {
  key: 1,
  class: "text-c-2"
}, E = {}, I = /* @__PURE__ */ h({
  ...E,
  inheritAttrs: !1,
  __name: "ScalarTextInput",
  props: {
    modelValue: {},
    modelModifiers: {}
  },
  emits: ["update:modelValue"],
  setup(m) {
    const r = v(m, "modelValue"), a = _(), { classCx: x, otherAttrs: u } = k();
    return $(() => {
      var e;
      "autofocus" in u.value && ((e = a.value) == null || e.focus());
    }), (e, n) => (s(), t("div", p(
      c(x)(
        "bg-b-1.5 flex cursor-text items-center gap-0.75 rounded-md border px-3 py-2.5 outline-offset-[-1px] focus-within:bg-b-1 has-[input:focus-visible]:outline"
      ),
      {
        onClick: n[1] || (n[1] = (f) => {
          var d;
          return (d = a.value) == null ? void 0 : d.focus();
        })
      }
    ), [
      o("div", y, [
        o("div", V, [
          o("div", C, [
            e.$slots.prefix ? (s(), t("span", M, [
              l(e.$slots, "prefix")
            ])) : i("", !0),
            b(o("input", p({
              ref_key: "input",
              ref: a,
              "onUpdate:modelValue": n[0] || (n[0] = (f) => r.value = f),
              class: "z-1 min-w-0 flex-1 border-none bg-transparent text-sm placeholder:font-[inherit] focus-within:outline-none"
            }, c(u)), null, 16), [
              [w, r.value]
            ]),
            e.$slots.prefix || e.$slots.suffix ? (s(), t("div", B, [
              e.$slots.prefix ? (s(), t("span", D, [
                l(e.$slots, "prefix")
              ])) : i("", !0),
              o("span", S, g(r.value || e.$attrs.placeholder), 1),
              e.$slots.suffix ? (s(), t("span", A, [
                l(e.$slots, "suffix")
              ])) : i("", !0)
            ])) : i("", !0)
          ])
        ]),
        l(e.$slots, "aside")
      ])
    ], 16));
  }
});
export {
  I as default
};
