import type { StoryObj } from '@storybook/vue3';
declare const meta: {
    component: import("vue").DefineComponent<{
        modelValue?: boolean;
        disabled?: boolean;
        label?: string;
    }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
        "update:modelValue": (value: boolean) => any;
    }, string, import("vue").PublicProps, Readonly<{
        modelValue?: boolean;
        disabled?: boolean;
        label?: string;
    }> & Readonly<{
        "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
    }>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, HTMLButtonElement>;
    tags: string[];
    args: {
        modelValue: false;
    };
    argTypes: {
        label: {
            control: "text";
        };
        disabled: {
            control: "boolean";
        };
    };
    render: (args: import("@storybook/vue3").ComponentPropsAndSlots<import("vue").DefineComponent<{
        modelValue?: boolean;
        disabled?: boolean;
        label?: string;
    }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
        "update:modelValue": (value: boolean) => any;
    }, string, import("vue").PublicProps, Readonly<{
        modelValue?: boolean;
        disabled?: boolean;
        label?: string;
    }> & Readonly<{
        "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
    }>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, HTMLButtonElement>>) => {
        components: {
            ScalarToggle: import("vue").DefineComponent<{
                modelValue?: boolean;
                disabled?: boolean;
                label?: string;
            }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
                "update:modelValue": (value: boolean) => any;
            }, string, import("vue").PublicProps, Readonly<{
                modelValue?: boolean;
                disabled?: boolean;
                label?: string;
            }> & Readonly<{
                "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
            }>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, HTMLButtonElement>;
        };
        setup(this: void): {
            args: import("@storybook/vue3").ComponentPropsAndSlots<import("vue").DefineComponent<{
                modelValue?: boolean;
                disabled?: boolean;
                label?: string;
            }, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
                "update:modelValue": (value: boolean) => any;
            }, string, import("vue").PublicProps, Readonly<{
                modelValue?: boolean;
                disabled?: boolean;
                label?: string;
            }> & Readonly<{
                "onUpdate:modelValue"?: ((value: boolean) => any) | undefined;
            }>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, HTMLButtonElement>>;
            model: import("vue").Ref<boolean | undefined, boolean | undefined>;
        };
        template: string;
    };
};
export default meta;
type Story = StoryObj<typeof meta>;
export declare const Base: Story;
export declare const Disabled: Story;
//# sourceMappingURL=ScalarToggle.stories.d.ts.map