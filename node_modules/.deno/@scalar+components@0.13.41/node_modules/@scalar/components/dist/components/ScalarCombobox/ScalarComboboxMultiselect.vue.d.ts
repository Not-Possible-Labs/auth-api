import type { ScalarFloatingOptions } from '../ScalarFloating';
import type { ComboboxSlots, Option, OptionGroup } from './types.js';
type __VLS_Props = {
    options: Option[] | OptionGroup[];
    modelValue?: Option[];
    placeholder?: string;
    isDeletable?: boolean;
} & ScalarFloatingOptions;
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Readonly<ComboboxSlots> & ComboboxSlots;
    refs: {
        comboboxPopoverRef: ({
            $: import("vue").ComponentInternalInstance;
            $data: {};
            $props: {
                readonly placement?: import("@floating-ui/vue").Placement | undefined;
                readonly offset?: import("@floating-ui/vue").OffsetOptions | undefined;
                readonly resize?: boolean | undefined;
                readonly target?: (string | HTMLElement) | undefined;
                readonly middleware?: import("@floating-ui/vue").Middleware[] | undefined;
                readonly teleport?: (boolean | string) | undefined;
            } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: import("vue").Slot<any> | undefined;
            }>;
            $root: import("vue").ComponentPublicInstance | null;
            $parent: import("vue").ComponentPublicInstance | null;
            $host: Element | null;
            $emit: (event: string, ...args: any[]) => void;
            $el: any;
            $options: import("vue").ComponentOptionsBase<Readonly<ScalarFloatingOptions> & Readonly<{}>, {
                popoverButtonRef: import("vue").Ref<import("vue").DefineComponent<{
                    as: {
                        type: (ObjectConstructor | StringConstructor)[];
                        default: string;
                    };
                    disabled: {
                        type: BooleanConstructor[];
                        default: boolean;
                    };
                    id: {
                        type: StringConstructor;
                        default: null;
                    };
                }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                    as: {
                        type: (ObjectConstructor | StringConstructor)[];
                        default: string;
                    };
                    disabled: {
                        type: BooleanConstructor[];
                        default: boolean;
                    };
                    id: {
                        type: StringConstructor;
                        default: null;
                    };
                }>>, {
                    id: string;
                    as: string | Record<string, any>;
                    disabled: boolean;
                }, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any> | null, import("vue").DefineComponent<{
                    as: {
                        type: (ObjectConstructor | StringConstructor)[];
                        default: string;
                    };
                    disabled: {
                        type: BooleanConstructor[];
                        default: boolean;
                    };
                    id: {
                        type: StringConstructor;
                        default: null;
                    };
                }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                    [key: string]: any;
                }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                    as: {
                        type: (ObjectConstructor | StringConstructor)[];
                        default: string;
                    };
                    disabled: {
                        type: BooleanConstructor[];
                        default: boolean;
                    };
                    id: {
                        type: StringConstructor;
                        default: null;
                    };
                }>>, {
                    id: string;
                    as: string | Record<string, any>;
                    disabled: boolean;
                }, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any> | null>;
            }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
                renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance | null, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: typeof import("vue").nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import("@vue/reactivity").OnCleanup]) => any : (...args: [any, any, import("@vue/reactivity").OnCleanup]) => any, options?: import("vue").WatchOptions): import("vue").WatchStopHandle;
        } & Readonly<{}> & Omit<Readonly<ScalarFloatingOptions> & Readonly<{}>, "popoverButtonRef"> & import("vue").ShallowUnwrapRef<{
            popoverButtonRef: import("vue").Ref<import("vue").DefineComponent<{
                as: {
                    type: (ObjectConstructor | StringConstructor)[];
                    default: string;
                };
                disabled: {
                    type: BooleanConstructor[];
                    default: boolean;
                };
                id: {
                    type: StringConstructor;
                    default: null;
                };
            }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                as: {
                    type: (ObjectConstructor | StringConstructor)[];
                    default: string;
                };
                disabled: {
                    type: BooleanConstructor[];
                    default: boolean;
                };
                id: {
                    type: StringConstructor;
                    default: null;
                };
            }>>, {
                id: string;
                as: string | Record<string, any>;
                disabled: boolean;
            }, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any> | null, import("vue").DefineComponent<{
                as: {
                    type: (ObjectConstructor | StringConstructor)[];
                    default: string;
                };
                disabled: {
                    type: BooleanConstructor[];
                    default: boolean;
                };
                id: {
                    type: StringConstructor;
                    default: null;
                };
            }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                as: {
                    type: (ObjectConstructor | StringConstructor)[];
                    default: string;
                };
                disabled: {
                    type: BooleanConstructor[];
                    default: boolean;
                };
                id: {
                    type: StringConstructor;
                    default: null;
                };
            }>>, {
                id: string;
                as: string | Record<string, any>;
                disabled: boolean;
            }, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any> | null>;
        }> & {} & import("vue").ComponentCustomProperties & {} & {
            $slots: Readonly<import("../ScalarPopover").ScalarPopoverSlots> & import("../ScalarPopover").ScalarPopoverSlots;
        }) | null;
    };
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import("vue").DefineComponent<__VLS_Props, {
    comboboxPopoverRef: import("vue").Ref<({
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<ScalarFloatingOptions> & Readonly<{}>, {
            popoverButtonRef: import("vue").Ref<import("vue").DefineComponent<{
                as: {
                    type: (ObjectConstructor | StringConstructor)[];
                    default: string;
                };
                disabled: {
                    type: BooleanConstructor[];
                    default: boolean;
                };
                id: {
                    type: StringConstructor;
                    default: null;
                };
            }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                as: {
                    type: (ObjectConstructor | StringConstructor)[];
                    default: string;
                };
                disabled: {
                    type: BooleanConstructor[];
                    default: boolean;
                };
                id: {
                    type: StringConstructor;
                    default: null;
                };
            }>>, {
                id: string;
                as: string | Record<string, any>;
                disabled: boolean;
            }, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any> | null, import("vue").DefineComponent<{
                as: {
                    type: (ObjectConstructor | StringConstructor)[];
                    default: string;
                };
                disabled: {
                    type: BooleanConstructor[];
                    default: boolean;
                };
                id: {
                    type: StringConstructor;
                    default: null;
                };
            }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                as: {
                    type: (ObjectConstructor | StringConstructor)[];
                    default: string;
                };
                disabled: {
                    type: BooleanConstructor[];
                    default: boolean;
                };
                id: {
                    type: StringConstructor;
                    default: null;
                };
            }>>, {
                id: string;
                as: string | Record<string, any>;
                disabled: boolean;
            }, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any> | null>;
        }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<ScalarFloatingOptions> & Readonly<{}>, {
            popoverButtonRef: import("vue").Ref<import("vue").DefineComponent<{
                as: {
                    type: (ObjectConstructor | StringConstructor)[];
                    default: string;
                };
                disabled: {
                    type: BooleanConstructor[];
                    default: boolean;
                };
                id: {
                    type: StringConstructor;
                    default: null;
                };
            }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                as: {
                    type: (ObjectConstructor | StringConstructor)[];
                    default: string;
                };
                disabled: {
                    type: BooleanConstructor[];
                    default: boolean;
                };
                id: {
                    type: StringConstructor;
                    default: null;
                };
            }>>, {
                id: string;
                as: string | Record<string, any>;
                disabled: boolean;
            }, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any> | null, import("vue").DefineComponent<{
                as: {
                    type: (ObjectConstructor | StringConstructor)[];
                    default: string;
                };
                disabled: {
                    type: BooleanConstructor[];
                    default: boolean;
                };
                id: {
                    type: StringConstructor;
                    default: null;
                };
            }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                as: {
                    type: (ObjectConstructor | StringConstructor)[];
                    default: string;
                };
                disabled: {
                    type: BooleanConstructor[];
                    default: boolean;
                };
                id: {
                    type: StringConstructor;
                    default: null;
                };
            }>>, {
                id: string;
                as: string | Record<string, any>;
                disabled: boolean;
            }, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any> | null>;
        }, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<ScalarFloatingOptions> & Readonly<{}>, {
        popoverButtonRef: import("vue").Ref<import("vue").DefineComponent<{
            as: {
                type: (ObjectConstructor | StringConstructor)[];
                default: string;
            };
            disabled: {
                type: BooleanConstructor[];
                default: boolean;
            };
            id: {
                type: StringConstructor;
                default: null;
            };
        }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            as: {
                type: (ObjectConstructor | StringConstructor)[];
                default: string;
            };
            disabled: {
                type: BooleanConstructor[];
                default: boolean;
            };
            id: {
                type: StringConstructor;
                default: null;
            };
        }>>, {
            id: string;
            as: string | Record<string, any>;
            disabled: boolean;
        }, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any> | null, import("vue").DefineComponent<{
            as: {
                type: (ObjectConstructor | StringConstructor)[];
                default: string;
            };
            disabled: {
                type: BooleanConstructor[];
                default: boolean;
            };
            id: {
                type: StringConstructor;
                default: null;
            };
        }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            as: {
                type: (ObjectConstructor | StringConstructor)[];
                default: string;
            };
            disabled: {
                type: BooleanConstructor[];
                default: boolean;
            };
            id: {
                type: StringConstructor;
                default: null;
            };
        }>>, {
            id: string;
            as: string | Record<string, any>;
            disabled: boolean;
        }, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any> | null>;
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: Readonly<import("../ScalarPopover").ScalarPopoverSlots> & import("../ScalarPopover").ScalarPopoverSlots;
    })) | null, ({
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<ScalarFloatingOptions> & Readonly<{}>, {
            popoverButtonRef: import("vue").Ref<import("vue").DefineComponent<{
                as: {
                    type: (ObjectConstructor | StringConstructor)[];
                    default: string;
                };
                disabled: {
                    type: BooleanConstructor[];
                    default: boolean;
                };
                id: {
                    type: StringConstructor;
                    default: null;
                };
            }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                as: {
                    type: (ObjectConstructor | StringConstructor)[];
                    default: string;
                };
                disabled: {
                    type: BooleanConstructor[];
                    default: boolean;
                };
                id: {
                    type: StringConstructor;
                    default: null;
                };
            }>>, {
                id: string;
                as: string | Record<string, any>;
                disabled: boolean;
            }, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any> | null, import("vue").DefineComponent<{
                as: {
                    type: (ObjectConstructor | StringConstructor)[];
                    default: string;
                };
                disabled: {
                    type: BooleanConstructor[];
                    default: boolean;
                };
                id: {
                    type: StringConstructor;
                    default: null;
                };
            }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                as: {
                    type: (ObjectConstructor | StringConstructor)[];
                    default: string;
                };
                disabled: {
                    type: BooleanConstructor[];
                    default: boolean;
                };
                id: {
                    type: StringConstructor;
                    default: null;
                };
            }>>, {
                id: string;
                as: string | Record<string, any>;
                disabled: boolean;
            }, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any> | null>;
        }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, false, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<ScalarFloatingOptions> & Readonly<{}>, {
            popoverButtonRef: import("vue").Ref<import("vue").DefineComponent<{
                as: {
                    type: (ObjectConstructor | StringConstructor)[];
                    default: string;
                };
                disabled: {
                    type: BooleanConstructor[];
                    default: boolean;
                };
                id: {
                    type: StringConstructor;
                    default: null;
                };
            }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                as: {
                    type: (ObjectConstructor | StringConstructor)[];
                    default: string;
                };
                disabled: {
                    type: BooleanConstructor[];
                    default: boolean;
                };
                id: {
                    type: StringConstructor;
                    default: null;
                };
            }>>, {
                id: string;
                as: string | Record<string, any>;
                disabled: boolean;
            }, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any> | null, import("vue").DefineComponent<{
                as: {
                    type: (ObjectConstructor | StringConstructor)[];
                    default: string;
                };
                disabled: {
                    type: BooleanConstructor[];
                    default: boolean;
                };
                id: {
                    type: StringConstructor;
                    default: null;
                };
            }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                as: {
                    type: (ObjectConstructor | StringConstructor)[];
                    default: string;
                };
                disabled: {
                    type: BooleanConstructor[];
                    default: boolean;
                };
                id: {
                    type: StringConstructor;
                    default: null;
                };
            }>>, {
                id: string;
                as: string | Record<string, any>;
                disabled: boolean;
            }, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any> | null>;
        }, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<ScalarFloatingOptions> & Readonly<{}>, {
        popoverButtonRef: import("vue").Ref<import("vue").DefineComponent<{
            as: {
                type: (ObjectConstructor | StringConstructor)[];
                default: string;
            };
            disabled: {
                type: BooleanConstructor[];
                default: boolean;
            };
            id: {
                type: StringConstructor;
                default: null;
            };
        }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            as: {
                type: (ObjectConstructor | StringConstructor)[];
                default: string;
            };
            disabled: {
                type: BooleanConstructor[];
                default: boolean;
            };
            id: {
                type: StringConstructor;
                default: null;
            };
        }>>, {
            id: string;
            as: string | Record<string, any>;
            disabled: boolean;
        }, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any> | null, import("vue").DefineComponent<{
            as: {
                type: (ObjectConstructor | StringConstructor)[];
                default: string;
            };
            disabled: {
                type: BooleanConstructor[];
                default: boolean;
            };
            id: {
                type: StringConstructor;
                default: null;
            };
        }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            as: {
                type: (ObjectConstructor | StringConstructor)[];
                default: string;
            };
            disabled: {
                type: BooleanConstructor[];
                default: boolean;
            };
            id: {
                type: StringConstructor;
                default: null;
            };
        }>>, {
            id: string;
            as: string | Record<string, any>;
            disabled: boolean;
        }, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any> | null>;
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: Readonly<import("../ScalarPopover").ScalarPopoverSlots> & import("../ScalarPopover").ScalarPopoverSlots;
    })) | null>;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
    delete: (option: Option) => any;
    "update:modelValue": (v: Option[]) => any;
}, string, import("vue").PublicProps, Readonly<__VLS_Props> & Readonly<{
    onDelete?: ((option: Option) => any) | undefined;
    "onUpdate:modelValue"?: ((v: Option[]) => any) | undefined;
}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=ScalarComboboxMultiselect.vue.d.ts.map