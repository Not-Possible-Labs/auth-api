import type { Environment } from '@scalar/oas-utils/entities/environment';
import type { Workspace } from '@scalar/oas-utils/entities/workspace';
import type { EnvVariable } from '../../../../store/active-entities';
import type { VueClassProp } from '../../../../types/vue';
type __VLS_Props = {
    type?: string;
    containerClass?: VueClassProp;
    required?: boolean;
    modelValue: string | number;
    readOnly?: boolean;
    environment: Environment;
    envVariables: EnvVariable[];
    workspace: Workspace;
};
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: {
        default?(_: {}): any;
        icon?(_: {}): any;
    };
    refs: {};
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import("vue").DefineComponent<__VLS_Props, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
    selectVariable: (value: string) => any;
    "update:modelValue": (v: string) => any;
    inputFocus: () => any;
    inputBlur: () => any;
}, string, import("vue").PublicProps, Readonly<__VLS_Props> & Readonly<{
    onSelectVariable?: (value: string) => any;
    "onUpdate:modelValue"?: (v: string) => any;
    onInputFocus?: () => any;
    onInputBlur?: () => any;
}>, {
    required: boolean;
    readOnly: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=RequestAuthDataTableInput.vue.d.ts.map