import type { Environment } from '@scalar/oas-utils/entities/environment';
import type { RequestExampleParameter } from '@scalar/oas-utils/entities/spec';
import type { Workspace } from '@scalar/oas-utils/entities/workspace';
import { type RouteLocationRaw } from 'vue-router';
import type { EnvVariable } from '../../../store/active-entities';
type __VLS_Props = {
    items?: (RequestExampleParameter & {
        route?: RouteLocationRaw;
    })[];
    /** Hide the enabled column */
    hasCheckboxDisabled?: boolean;
    showUploadButton?: boolean;
    isGlobal?: boolean;
    isReadOnly?: boolean;
    environment: Environment;
    envVariables: EnvVariable[];
    workspace: Workspace;
    invalidParams?: Set<string>;
};
declare const _default: import("vue").DefineComponent<__VLS_Props, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
    updateRow: (idx: number, field: "value" | "key", value: string) => any;
    toggleRow: (idx: number, enabled: boolean) => any;
    addRow: () => any;
    deleteRow: () => any;
    inputFocus: () => any;
    inputBlur: () => any;
    uploadFile: (idx: number) => any;
    removeFile: (idx: number) => any;
}, string, import("vue").PublicProps, Readonly<__VLS_Props> & Readonly<{
    onUpdateRow?: (idx: number, field: "value" | "key", value: string) => any;
    onToggleRow?: (idx: number, enabled: boolean) => any;
    onAddRow?: () => any;
    onDeleteRow?: () => any;
    onInputFocus?: () => any;
    onInputBlur?: () => any;
    onUploadFile?: (idx: number) => any;
    onRemoveFile?: (idx: number) => any;
}>, {
    hasCheckboxDisabled: boolean;
    showUploadButton: boolean;
    isGlobal: boolean;
    isReadOnly: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, HTMLDivElement>;
export default _default;
//# sourceMappingURL=RequestTable.vue.d.ts.map