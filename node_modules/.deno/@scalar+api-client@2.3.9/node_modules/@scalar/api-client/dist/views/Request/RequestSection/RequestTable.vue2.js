import { defineComponent as _, openBlock as d, createBlock as p, withCtx as n, createVNode as t, createElementVNode as s, createTextVNode as k, createElementBlock as m, Fragment as f, renderList as I, normalizeClass as w, unref as i, toDisplayString as V, createCommentVNode as x } from "vue";
import { ScalarTooltip as z, ScalarIcon as g, ScalarButton as D } from "@scalar/components";
import { RouterLink as E } from "vue-router";
import B from "../../../components/CodeInput/CodeInput.vue.js";
import q from "../../../components/DataTable/DataTable.vue.js";
import c from "../../../components/DataTable/DataTableCell.vue.js";
import G from "../../../components/DataTable/DataTableCheckbox.vue.js";
import v from "../../../components/DataTable/DataTableHeader.vue.js";
import R from "../../../components/DataTable/DataTableRow.vue.js";
import { parameterIsInvalid as N, hasItemProperties as C } from "../libs/request.js";
import P from "./RequestTableTooltip.vue.js";
const j = { class: "contents" }, O = { class: "sr-only" }, A = { class: "text-c-2 filemask flex w-full max-w-[100%] items-end justify-end overflow-hidden p-1" }, K = ["onClick"], L = {
  key: 1,
  class: "p-0.5"
}, oe = /* @__PURE__ */ _({
  __name: "RequestTable",
  props: {
    items: {},
    hasCheckboxDisabled: { type: Boolean, default: !1 },
    showUploadButton: { type: Boolean, default: !1 },
    isGlobal: { type: Boolean, default: !1 },
    isReadOnly: { type: Boolean, default: !1 },
    environment: {},
    envVariables: {},
    workspace: {},
    invalidParams: {}
  },
  emits: ["updateRow", "toggleRow", "addRow", "deleteRow", "inputFocus", "inputBlur", "uploadFile", "removeFile"],
  setup(h, { emit: F }) {
    const b = h, r = F, U = ["", "", "36px"], y = (a, l, e) => {
      r("updateRow", a, l, e);
    }, S = (a) => {
      r("uploadFile", a);
    }, $ = (a) => Array.isArray(a.default) && a.default.length === 1 ? a.default[0] : a.default;
    return (a, l) => (d(), p(q, {
      class: "group/table flex-1",
      columns: U
    }, {
      default: n(() => [
        t(R, { class: "sr-only !block" }, {
          default: n(() => [
            t(v, null, {
              default: n(() => l[4] || (l[4] = [
                s("span", { class: "sr-only" }, "Enabled", -1)
              ])),
              _: 1
            }),
            t(v, null, {
              default: n(() => l[5] || (l[5] = [
                k("Key")
              ])),
              _: 1
            }),
            t(v, null, {
              default: n(() => l[6] || (l[6] = [
                k("Value")
              ])),
              _: 1
            })
          ]),
          _: 1
        }),
        (d(!0), m(f, null, I(a.items, (e, u) => (d(), p(R, {
          id: e.key,
          key: u,
          class: w({
            alert: i(N)(e).value,
            error: a.invalidParams && a.invalidParams.has(e.key)
          })
        }, {
          default: n(() => [
            s("label", j, [
              a.isGlobal ? (d(), p(i(E), {
                key: 0,
                class: "!border-r-1/2 border-t-1/2 text-c-2 flex items-center justify-center",
                to: e.route ?? {}
              }, {
                default: n(() => [
                  l[8] || (l[8] = s("span", { class: "sr-only" }, "Global", -1)),
                  t(i(z), {
                    as: "div",
                    side: "top"
                  }, {
                    trigger: n(() => [
                      t(i(g), {
                        class: "text-c-1",
                        icon: "Globe",
                        size: "xs"
                      })
                    ]),
                    content: n(() => l[7] || (l[7] = [
                      s("div", { class: "w-content bg-b-1 text-xxs text-c-1 z-100 pointer-events-none z-10 grid max-w-[320px] gap-1.5 rounded p-2 leading-5 shadow-lg" }, [
                        s("div", { class: "text-c-1 flex items-center" }, [
                          s("span", { class: "text-pretty" }, " Global cookies are shared across the whole workspace. ")
                        ])
                      ], -1)
                    ])),
                    _: 1
                  })
                ]),
                _: 2
              }, 1032, ["to"])) : (d(), m(f, { key: 1 }, [
                s("span", O, " Row " + V(e.enabled ? "Enabled" : "Disabled"), 1),
                t(G, {
                  class: "!border-r-1/2",
                  disabled: b.hasCheckboxDisabled,
                  modelValue: e.enabled,
                  "onUpdate:modelValue": (o) => r("toggleRow", u, o)
                }, null, 8, ["disabled", "modelValue", "onUpdate:modelValue"])
              ], 64))
            ]),
            t(c, null, {
              default: n(() => [
                t(B, {
                  disableCloseBrackets: "",
                  disabled: b.isReadOnly,
                  disableEnter: "",
                  disableTabIndent: "",
                  envVariables: a.envVariables,
                  environment: a.environment,
                  modelValue: e.key,
                  placeholder: "Key",
                  required: !!e.required,
                  workspace: a.workspace,
                  onBlur: l[0] || (l[0] = (o) => r("inputBlur")),
                  onFocus: l[1] || (l[1] = (o) => r("inputFocus")),
                  onSelectVariable: (o) => y(u, "key", o),
                  "onUpdate:modelValue": (o) => r("updateRow", u, "key", o)
                }, null, 8, ["disabled", "envVariables", "environment", "modelValue", "required", "workspace", "onSelectVariable", "onUpdate:modelValue"])
              ]),
              _: 2
            }, 1024),
            t(c, null, {
              default: n(() => [
                t(B, {
                  class: w({
                    "pr-6": i(C)(e)
                  }),
                  default: e.default,
                  disableCloseBrackets: "",
                  disabled: b.isReadOnly,
                  disableEnter: "",
                  disableTabIndent: "",
                  enum: e.enum ?? [],
                  envVariables: a.envVariables,
                  environment: a.environment,
                  examples: e.examples ?? [],
                  max: e.maximum,
                  min: e.minimum,
                  modelValue: e.value,
                  nullable: !!e.nullable,
                  placeholder: "Value",
                  type: e.type,
                  workspace: a.workspace,
                  onBlur: l[2] || (l[2] = (o) => r("inputBlur")),
                  onFocus: l[3] || (l[3] = (o) => r("inputFocus")),
                  onSelectVariable: (o) => y(u, "value", o),
                  "onUpdate:modelValue": (o) => r("updateRow", u, "value", o)
                }, {
                  icon: n(() => [
                    i(C)(e) ? (d(), p(P, {
                      key: 0,
                      item: { ...e, default: $(e) }
                    }, null, 8, ["item"])) : x("", !0)
                  ]),
                  _: 2
                }, 1032, ["class", "default", "disabled", "enum", "envVariables", "environment", "examples", "max", "min", "modelValue", "nullable", "type", "workspace", "onSelectVariable", "onUpdate:modelValue"])
              ]),
              _: 2
            }, 1024),
            a.showUploadButton ? (d(), p(c, {
              key: 0,
              class: "group/upload flex items-center justify-center whitespace-nowrap"
            }, {
              default: n(() => {
                var o;
                return [
                  e.file ? (d(), m(f, { key: 0 }, [
                    s("div", A, [
                      s("span", null, V((o = e.file) == null ? void 0 : o.name), 1)
                    ]),
                    s("button", {
                      class: "bg-b-2 centered-x centered-y absolute hidden w-[calc(100%_-_8px)] rounded p-0.5 text-center text-xs font-medium group-hover/upload:block",
                      type: "button",
                      onClick: (T) => r("removeFile", u)
                    }, " Delete ", 8, K)
                  ], 64)) : (d(), m("div", L, [
                    t(i(D), {
                      class: "bg-b-2 hover:bg-b-3 text-c-2 h-fit border-0 py-px shadow-none",
                      size: "sm",
                      variant: "outlined",
                      onClick: (T) => S(u)
                    }, {
                      default: n(() => [
                        l[9] || (l[9] = s("span", null, "Upload File", -1)),
                        t(i(g), {
                          class: "ml-1",
                          icon: "UploadSimple",
                          size: "xs",
                          thickness: "2.5"
                        })
                      ]),
                      _: 2
                    }, 1032, ["onClick"])
                  ]))
                ];
              }),
              _: 2
            }, 1024)) : x("", !0)
          ]),
          _: 2
        }, 1032, ["id", "class"]))), 128))
      ]),
      _: 1
    }));
  }
});
export {
  oe as default
};
