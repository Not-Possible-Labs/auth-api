import { defineComponent as g, ref as m, watch as w, nextTick as h, openBlock as o, createElementBlock as i, createElementVNode as n, createBlock as u, unref as s, withCtx as v, createVNode as d, createCommentVNode as a, Fragment as f } from "vue";
import { ScalarButton as c, ScalarIcon as b, ScalarMarkdown as x } from "@scalar/components";
import y from "../../../components/CodeInput/CodeInput.vue.js";
const z = { class: "flex h-full w-full flex-col gap-2 pt-8" }, C = { class: "flex min-h-8 items-center justify-between gap-2 pl-1.5" }, I = { class: "has-[:focus-visible]:bg-b-1 z-1 group relative flex flex-col rounded-lg" }, B = { class: "h-full min-h-[calc(1rem*4)]" }, $ = {
  key: 1,
  class: "text-c-3 flex h-full items-center justify-center rounded-lg border p-4"
}, D = /* @__PURE__ */ g({
  __name: "MarkdownInput",
  props: {
    modelValue: {},
    environment: {},
    envVariables: {},
    workspace: {}
  },
  emits: ["update:modelValue"],
  setup(E, { emit: k }) {
    const V = k, t = m("preview"), p = m(null);
    return w(t, (l) => {
      l === "edit" && h(() => {
        var e;
        (e = p.value) == null || e.focus();
      });
    }), (l, e) => (o(), i("div", z, [
      n("div", C, [
        e[6] || (e[6] = n("h3", { class: "font-bold" }, "Description", -1)),
        t.value === "preview" ? (o(), u(s(c), {
          key: 0,
          class: "text-c-2 hover:text-c-1 flex items-center gap-2",
          size: "sm",
          type: "button",
          variant: "outlined",
          onClick: e[0] || (e[0] = (r) => t.value = "edit")
        }, {
          default: v(() => [
            d(s(b), {
              icon: "Pencil",
              size: "sm",
              thickness: "1.5"
            }),
            e[5] || (e[5] = n("span", null, "Edit", -1))
          ]),
          _: 1
        })) : a("", !0)
      ]),
      n("div", I, [
        n("div", B, [
          t.value === "preview" ? (o(), i(f, { key: 0 }, [
            l.modelValue ? (o(), i(f, { key: 0 }, [
              l.modelValue ? (o(), u(s(x), {
                key: 0,
                class: "hover:border-b-3 h-full rounded border border-transparent p-1.5",
                value: l.modelValue,
                withImages: "",
                onDblclick: e[1] || (e[1] = (r) => t.value = "edit")
              }, null, 8, ["value"])) : a("", !0),
              e[7] || (e[7] = n("div", { class: "brightness-lifted -z-1 bg-b-1 absolute inset-0 hidden rounded group-hover:block group-has-[:focus-visible]:hidden" }, null, -1))
            ], 64)) : (o(), i("div", $, [
              d(s(c), {
                class: "hover:bg-b-2 hover:text-c-1 text-c-2 flex items-center gap-2",
                size: "sm",
                variant: "ghost",
                onClick: e[2] || (e[2] = (r) => t.value = "edit")
              }, {
                default: v(() => [
                  d(s(b), {
                    icon: "Pencil",
                    size: "sm",
                    thickness: "1.5"
                  }),
                  e[8] || (e[8] = n("span", null, "Write a description", -1))
                ]),
                _: 1
              })
            ]))
          ], 64)) : a("", !0),
          t.value === "edit" ? (o(), u(y, {
            key: 1,
            ref_key: "codeInputRef",
            ref: p,
            class: "h-full border px-0.5 py-0",
            envVariables: l.envVariables,
            environment: l.environment,
            modelValue: l.modelValue,
            workspace: l.workspace,
            onBlur: e[3] || (e[3] = (r) => t.value = "preview"),
            "onUpdate:modelValue": e[4] || (e[4] = (r) => V("update:modelValue", r))
          }, null, 8, ["envVariables", "environment", "modelValue", "workspace"])) : a("", !0)
        ])
      ])
    ]));
  }
});
export {
  D as default
};
