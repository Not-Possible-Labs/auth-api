import { defineComponent as ee, computed as h, ref as ae, watch as A, openBlock as b, createBlock as g, withCtx as m, createTextVNode as H, toDisplayString as F, createVNode as c, unref as v, createElementVNode as k, createCommentVNode as ne, createElementBlock as E, Fragment as te, nextTick as oe } from "vue";
import { ScalarListbox as X, ScalarButton as D, ScalarIcon as C } from "@scalar/components";
import { requestExampleParametersSchema as Y } from "@scalar/oas-utils/entities/spec";
import { canMethodHaveBody as le } from "@scalar/oas-utils/helpers";
import ie from "../../../components/CodeInput/CodeInput.vue.js";
import re from "../../../components/DataTable/DataTable.vue.js";
import de from "../../../components/DataTable/DataTableHeader.vue.js";
import j from "../../../components/DataTable/DataTableRow.vue.js";
import ue from "../../../components/ViewLayout/ViewLayoutCollapse.vue.js";
import G from "./RequestTable.vue.js";
import { useWorkspace as se } from "../../../store/store.js";
import { useFileDialog as K } from "../../../hooks/useFileDialog.js";
const me = {
  key: 0,
  class: "border-t-1/2 text-c-3 flex min-h-10 w-full items-center justify-center p-2 text-sm"
}, ce = {
  key: 1,
  class: "flex items-center justify-center overflow-hidden border-t p-1.5"
}, fe = { class: "text-c-2 w-full max-w-full overflow-hidden whitespace-nowrap rounded border px-1.5 py-1 text-xs" }, Ue = /* @__PURE__ */ ee({
  __name: "RequestBody",
  props: {
    example: {},
    operation: {},
    environment: {},
    envVariables: {},
    workspace: {},
    title: {}
  },
  setup(l) {
    const { requestExampleMutators: d } = se(), Q = {
      json: "json",
      xml: "xml",
      yaml: "yaml",
      edn: "edn",
      other: "html"
    }, x = Object.entries({
      multipartForm: "Multipart Form",
      formUrlEncoded: "Form URL Encoded",
      binaryFile: "Binary File",
      json: "JSON",
      xml: "XML",
      yaml: "YAML",
      edn: "EDN",
      other: "Other",
      none: "None"
    }).map(([e, a]) => ({
      id: e,
      label: a
    })), R = h(() => {
      var o;
      const { activeBody: e, formData: a, raw: n } = l.example.body;
      return e === "formData" ? (a == null ? void 0 : a.encoding) === "urlencoded" ? "formUrlEncoded" : "multipartForm" : e === "binary" ? "binaryFile" : e === "raw" && (n != null && n.encoding) ? n.encoding === "html" ? "other" : n.encoding : Object.keys(((o = l.operation.requestBody) == null ? void 0 : o.content) || {})[0] || "none";
    }), p = h({
      get: () => x.find(
        (e) => e.id === R.value
      ) ?? x[x.length - 1] ?? x[0],
      set: (e) => {
        e != null && e.id && L(e.id);
      }
    }), B = ae(null), Z = h(() => {
      var a;
      const e = (a = p.value) == null ? void 0 : a.id;
      return Q[e] ?? "plaintext";
    });
    function P() {
      console.log("deleteRow");
    }
    const N = (e, a, n) => {
      var o, i, s, r, f, V, J;
      const t = y.value;
      if (t.length > e) {
        const u = [...t];
        u[e] = {
          ...u[e],
          value: ((o = u[e]) == null ? void 0 : o.value) || "",
          key: ((i = u[e]) == null ? void 0 : i.key) || "",
          enabled: ((s = u[e]) == null ? void 0 : s.enabled) ?? !1,
          [a]: n || ""
        }, (((r = u[e]) == null ? void 0 : r.key) !== "" || ((f = u[e]) == null ? void 0 : f.value) !== "") && (u[e].enabled = !0), ((V = u[e]) == null ? void 0 : V.key) === "" && ((J = u[e]) == null ? void 0 : J.value) === "" && u.splice(e, 1), d.edit(
          l.example.uid,
          "body.formData.value",
          u
        );
      } else {
        const u = [Y.parse({ [a]: n })];
        d.edit(l.example.uid, "body.formData.value", u), oe(() => {
          var $;
          if (!B.value)
            return;
          ($ = B.value.querySelectorAll("input")[a === "key" ? 0 : 1]) == null || $.focus();
        });
      }
      e === t.length - 1 && O();
    }, y = h(() => {
      var e;
      return ((e = l.example.body.formData) == null ? void 0 : e.value) ?? [];
    }), T = () => {
      const e = y.value[y.value.length - 1];
      (!e || e.key !== "" || e.value !== "") && O();
    }, O = () => {
      const e = Y.parse({
        enabled: !1
      }), a = [...y.value, e];
      l.example.body.formData ? d.edit(l.example.uid, "body.formData.value", a) : d.edit(l.example.uid, "body.formData", {
        value: a,
        encoding: "form-data"
      });
    }, S = (e, a) => {
      const n = y.value;
      if (n.length > e) {
        const t = [...n];
        t[e] && (t[e].enabled = a), d.edit(
          l.example.uid,
          "body.formData.value",
          t
        );
      }
    }, q = (e) => d.edit(l.example.uid, "body.raw.value", e), W = (e) => e === "multipartForm" ? {
      activeBody: "formData",
      encoding: "form-data",
      header: "multipart/form-data"
    } : e === "formUrlEncoded" ? {
      activeBody: "formData",
      encoding: "urlencoded",
      header: "application/x-www-form-urlencoded"
    } : e === "binaryFile" ? {
      activeBody: "binary",
      encoding: void 0,
      header: "application/octet-stream"
    } : e === "json" || e.endsWith("+json") ? {
      activeBody: "raw",
      encoding: "json",
      header: e.endsWith("+json") ? `application/${e}` : "application/json"
    } : e === "xml" ? {
      activeBody: "raw",
      encoding: "xml",
      header: "application/xml"
    } : e === "yaml" ? {
      activeBody: "raw",
      encoding: "yaml",
      header: "application/yaml"
    } : e === "edn" ? {
      activeBody: "raw",
      encoding: "edn",
      header: "application/edn"
    } : e === "other" ? {
      activeBody: "raw",
      encoding: "html",
      header: "application/html"
    } : { activeBody: "raw", encoding: void 0, header: void 0 }, L = (e) => {
      var s, r;
      const { activeBody: a, encoding: n, header: t } = W(e);
      if (d.edit(l.example.uid, "body.activeBody", a), n && a === "raw")
        d.edit(l.example.uid, "body.raw", {
          encoding: n,
          value: ((s = l.example.body.raw) == null ? void 0 : s.value) ?? ""
        });
      else if (n && a === "formData")
        d.edit(l.example.uid, "body.formData", {
          encoding: n,
          value: ((r = l.example.body.formData) == null ? void 0 : r.value) ?? []
        });
      else if (!n && a !== "binary") {
        const { raw: f, ...V } = l.example.body;
        d.edit(l.example.uid, "body", V);
      }
      const o = [...l.example.parameters.headers], i = o.findIndex(
        (f) => f.key.toLowerCase() === "content-type"
      );
      if (i >= 0)
        t && o[i] ? o[i].value = t : o[i] && (a !== "raw" || e === "none") && o.splice(i, 1);
      else if (t) {
        const f = o[o.length - 1];
        f && f.key === "" && f.value === "" ? o.splice(o.length - 1, 0, {
          key: "Content-Type",
          value: t,
          enabled: !0
        }) : o.push({
          key: "Content-Type",
          value: t,
          enabled: !0
        });
      }
      d.edit(l.example.uid, "parameters.headers", o);
    }, M = async (e) => {
      const { open: a } = K({
        onChange: async (n) => {
          var o, i;
          const t = n == null ? void 0 : n[0];
          if (t) {
            const r = [...y.value];
            r[e] = {
              ...r[e],
              file: t,
              value: ((o = r[e]) == null ? void 0 : o.value) || t.name,
              key: ((i = r[e]) == null ? void 0 : i.key) || t.name,
              enabled: !0
            }, d.edit(
              l.example.uid,
              "body.formData.value",
              r
            ), T();
          }
        },
        multiple: !1,
        accept: "*/*"
      });
      a();
    }, I = () => d.edit(l.example.uid, "body.binary", void 0);
    function z(e) {
      const a = y.value, n = [...a], t = a[e], o = t == null ? void 0 : t.file;
      a.length > 1 && (!(t != null && t.key) && !(t != null && t.value) || o && (t == null ? void 0 : t.key) === o.name && (t == null ? void 0 : t.value) === o.name) ? n.splice(e, 1) : n[e] && (n[e].file = void 0), d.edit(l.example.uid, "body.formData.value", n);
    }
    function _() {
      const { open: e } = K({
        onChange: async (a) => {
          const n = a == null ? void 0 : a[0];
          n && d.edit(l.example.uid, "body.binary", n);
        },
        multiple: !1,
        accept: "*/*"
      });
      e();
    }
    A(
      p,
      (e) => {
        ["multipartForm", "formUrlEncoded"].includes((e == null ? void 0 : e.id) || "") && T();
      },
      { immediate: !0 }
    ), A(
      () => l.example.uid,
      () => {
        l.operation.method && le(l.operation.method) && L(R.value), ["multipartForm", "formUrlEncoded"].includes(
          R.value
        ) && T();
      },
      { immediate: !0 }
    );
    const w = h(() => {
      var o, i, s;
      const e = (o = p.value) == null ? void 0 : o.id, { header: a } = W(e), n = ((i = l.operation.requestBody) == null ? void 0 : i.content) || {}, t = a ? ((s = n[a]) == null ? void 0 : s.examples) || {} : {};
      return Object.entries(t).map(([r, f]) => ({
        id: r,
        label: r,
        value: f
      }));
    }), U = h({
      get: () => {
        var t;
        const e = ((t = l.example.body.raw) == null ? void 0 : t.value) ?? "{}", a = JSON.parse(e);
        return w.value.find((o) => {
          const i = o.value;
          return JSON.stringify(i.value) === JSON.stringify(a);
        }) ?? w.value[0];
      },
      set: (e) => {
        if (e != null && e.id) {
          const a = w.value.find((n) => n.id === e.id);
          if (a) {
            const n = a.value;
            q(JSON.stringify(n.value, null, 2));
          }
        }
      }
    });
    return (e, a) => (b(), g(ue, null, {
      title: m(() => [
        H(F(e.title), 1)
      ]),
      default: m(() => [
        c(re, { columns: [""] }, {
          default: m(() => [
            c(j, null, {
              default: m(() => [
                c(de, { class: "relative col-span-full flex h-8 cursor-pointer items-center justify-between !p-0" }, {
                  default: m(() => [
                    c(v(X), {
                      modelValue: p.value,
                      "onUpdate:modelValue": a[0] || (a[0] = (n) => p.value = n),
                      options: v(x),
                      teleport: ""
                    }, {
                      default: m(() => [
                        c(v(D), {
                          class: "text-c-2 hover:text-c-1 flex h-full w-fit gap-1.5 px-3 font-normal",
                          fullWidth: "",
                          variant: "ghost"
                        }, {
                          default: m(() => {
                            var n;
                            return [
                              k("span", null, F((n = p.value) == null ? void 0 : n.label), 1),
                              c(v(C), {
                                icon: "ChevronDown",
                                size: "md"
                              })
                            ];
                          }),
                          _: 1
                        })
                      ]),
                      _: 1
                    }, 8, ["modelValue", "options"]),
                    w.value.length > 0 ? (b(), g(v(X), {
                      key: 0,
                      modelValue: U.value,
                      "onUpdate:modelValue": a[1] || (a[1] = (n) => U.value = n),
                      options: w.value,
                      side: "left",
                      teleport: ""
                    }, {
                      default: m(() => [
                        c(v(D), {
                          class: "text-c-2 hover:text-c-1 flex h-full w-fit gap-1.5 px-2 font-normal",
                          fullWidth: "",
                          variant: "ghost"
                        }, {
                          default: m(() => {
                            var n;
                            return [
                              k("span", null, F((n = U.value) == null ? void 0 : n.label), 1),
                              c(v(C), {
                                icon: "ChevronDown",
                                size: "md"
                              })
                            ];
                          }),
                          _: 1
                        })
                      ]),
                      _: 1
                    }, 8, ["modelValue", "options"])) : ne("", !0)
                  ]),
                  _: 1
                })
              ]),
              _: 1
            }),
            c(j, null, {
              default: m(() => {
                var n, t, o, i, s, r;
                return [
                  ((n = p.value) == null ? void 0 : n.id) === "none" ? (b(), E("div", me, a[2] || (a[2] = [
                    k("span", null, "No Body", -1)
                  ]))) : ((t = p.value) == null ? void 0 : t.id) === "binaryFile" ? (b(), E("div", ce, [
                    e.example.body.binary ? (b(), E(te, { key: 0 }, [
                      k("span", fe, F(e.example.body.binary.name), 1),
                      c(v(D), {
                        class: "bg-b-2 hover:bg-b-3 text-c-2 ml-1 border-0 shadow-none",
                        size: "sm",
                        variant: "outlined",
                        onClick: I
                      }, {
                        default: m(() => a[3] || (a[3] = [
                          H(" Delete ")
                        ])),
                        _: 1
                      })
                    ], 64)) : (b(), g(v(D), {
                      key: 1,
                      class: "bg-b-2 hover:bg-b-3 text-c-2 border-0 shadow-none",
                      size: "sm",
                      variant: "outlined",
                      onClick: _
                    }, {
                      default: m(() => [
                        a[4] || (a[4] = k("span", null, "Upload File", -1)),
                        c(v(C), {
                          class: "ml-1",
                          icon: "UploadSimple",
                          size: "xs",
                          thickness: "2.5"
                        })
                      ]),
                      _: 1
                    }))
                  ])) : ((o = p.value) == null ? void 0 : o.id) == "multipartForm" ? (b(), g(G, {
                    key: 2,
                    ref_key: "tableWrapperRef",
                    ref: B,
                    class: "!m-0 rounded-t-none border-b-0 border-l-0 border-r-0 border-t-0 shadow-none",
                    columns: ["32px", "", "", "104px"],
                    envVariables: e.envVariables,
                    environment: e.environment,
                    items: y.value,
                    showUploadButton: "",
                    workspace: e.workspace,
                    onDeleteRow: P,
                    onRemoveFile: z,
                    onToggleRow: S,
                    onUpdateRow: N,
                    onUploadFile: M
                  }, null, 8, ["envVariables", "environment", "items", "workspace"])) : ((i = p.value) == null ? void 0 : i.id) == "formUrlEncoded" ? (b(), g(G, {
                    key: 3,
                    ref_key: "tableWrapperRef",
                    ref: B,
                    class: "!m-0 rounded-t-none border-b-0 border-l-0 border-r-0 border-t-0 shadow-none",
                    columns: ["32px", "", "", "104px"],
                    envVariables: e.envVariables,
                    environment: e.environment,
                    items: y.value,
                    showUploadButton: "",
                    workspace: e.workspace,
                    onDeleteRow: P,
                    onRemoveFile: z,
                    onToggleRow: S,
                    onUpdateRow: N,
                    onUploadFile: M
                  }, null, 8, ["envVariables", "environment", "items", "workspace"])) : (b(), g(ie, {
                    key: 4,
                    class: "border-t-1/2 px-1",
                    content: "",
                    envVariables: e.envVariables,
                    environment: e.environment,
                    language: Z.value,
                    lineNumbers: "",
                    lint: "",
                    modelValue: ((r = (s = e.example.body) == null ? void 0 : s.raw) == null ? void 0 : r.value) ?? "",
                    workspace: e.workspace,
                    "onUpdate:modelValue": q
                  }, null, 8, ["envVariables", "environment", "language", "modelValue", "workspace"]))
                ];
              }),
              _: 1
            }),
            c(j)
          ]),
          _: 1
        })
      ]),
      _: 1
    }));
  }
});
export {
  Ue as default
};
