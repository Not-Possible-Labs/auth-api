import { defineComponent as m, ref as f, toRef as c, openBlock as l, createElementBlock as i, createElementVNode as e, unref as a, createVNode as y, createCommentVNode as b } from "vue";
import { ScalarIcon as v } from "@scalar/components";
import { prettyPrintJson as C } from "@scalar/oas-utils/helpers";
import { useCodeMirror as g } from "@scalar/use-codemirror";
import { useClipboard as _ } from "@scalar/use-hooks/useClipboard";
const k = { class: "body-raw grid min-h-0 overflow-hidden p-px outline-none has-[:focus-visible]:outline" }, w = {
  key: 0,
  class: "scalar-code-copy"
}, x = {
  class: "body-raw-scroller custom-scroll relative overflow-x-auto overscroll-contain",
  tabindex: "0"
}, E = /* @__PURE__ */ m({
  __name: "ResponseBodyRaw",
  props: {
    content: {},
    language: {}
  },
  setup(d) {
    const r = d, n = f(null), { copyToClipboard: u } = _(), { codeMirror: p } = g({
      codeMirrorRef: n,
      readOnly: !0,
      lineNumbers: !0,
      content: c(() => C(r.content)),
      language: c(() => r.language),
      forceFoldGutter: !0
    }), s = () => {
      var t;
      return ((t = p.value) == null ? void 0 : t.state.doc.toString()) || "";
    };
    return (t, o) => (l(), i("div", k, [
      s() ? (l(), i("div", w, [
        e("button", {
          class: "copy-button",
          type: "button",
          onClick: o[0] || (o[0] = (R) => a(u)(s()))
        }, [
          o[1] || (o[1] = e("span", { class: "sr-only" }, "Copy content", -1)),
          y(a(v), {
            icon: "Clipboard",
            size: "md"
          })
        ])
      ])) : b("", !0),
      e("div", x, [
        e("div", {
          ref_key: "codeMirrorRef",
          ref: n
        }, null, 512)
      ])
    ]));
  }
});
export {
  E as default
};
