import { defineComponent as b, ref as C, computed as d, openBlock as o, createBlock as n, createSlots as N, withCtx as u, createTextVNode as h, toDisplayString as g, createElementBlock as T, createElementVNode as _, unref as a, createCommentVNode as s, createVNode as $ } from "vue";
import E from "../../../components/ViewLayout/ViewLayoutCollapse.vue.js";
import { useResponseBody as P } from "../../../hooks/useResponseBody.js";
import S from "./ResponseBodyDownload.vue.js";
import U from "./ResponseBodyInfo.vue.js";
import j from "./ResponseBodyPreview.vue.js";
import D from "./ResponseBodyRaw.vue.js";
import F from "./ResponseBodyToggle.vue.js";
import { mediaTypes as I } from "../consts/mediaTypes.js";
const q = {
  key: 0,
  class: "bg-b-1 flex max-h-[calc(100%-32px)] flex-col overflow-hidden"
}, z = { class: "flex items-center justify-between border-b px-3 py-1.5" }, A = { class: "text-xxs font-code leading-3" }, X = /* @__PURE__ */ b({
  __name: "ResponseBody",
  props: {
    title: {},
    data: {},
    headers: {}
  },
  setup(x) {
    const c = x, r = C(!0), p = d(
      () => {
        var t;
        return !!((t = e.value) != null && t.raw && e.value.preview);
      }
    ), k = d(() => r.value || !p.value), B = d(() => !r.value || !p.value), { mimeType: i, attachmentFilename: R, dataUrl: l } = P({
      data: c.data,
      headers: c.headers
    }), e = d(() => I[i.value.essence]);
    return (t, m) => (o(), n(E, { class: "max-h-content overflow-y-hidden" }, N({
      title: u(() => [
        h(g(t.title), 1)
      ]),
      default: u(() => {
        var f, v, y, w;
        return [
          t.data ? (o(), T("div", q, [
            _("div", z, [
              _("span", A, g(a(i).essence), 1),
              p.value ? (o(), n(F, {
                key: 0,
                modelValue: r.value,
                "onUpdate:modelValue": m[0] || (m[0] = (V) => r.value = V)
              }, null, 8, ["modelValue"])) : s("", !0)
            ]),
            (f = e.value) != null && f.raw && B.value ? (o(), n(D, {
              key: a(l),
              content: t.data,
              language: e.value.language
            }, null, 8, ["content", "language"])) : s("", !0),
            (v = e.value) != null && v.preview && k.value ? (o(), n(j, {
              key: a(l),
              alpha: e.value.alpha,
              mode: e.value.preview,
              src: a(l),
              type: a(i).essence
            }, null, 8, ["alpha", "mode", "src", "type"])) : s("", !0),
            !((y = e.value) != null && y.raw) && !((w = e.value) != null && w.preview) ? (o(), n(U, { key: 2 }, {
              default: u(() => m[1] || (m[1] = [
                h(" Binary file ")
              ])),
              _: 1
            })) : s("", !0)
          ])) : s("", !0)
        ];
      }),
      _: 2
    }, [
      t.data && a(l) ? {
        name: "actions",
        fn: u(() => [
          $(S, {
            filename: a(R),
            href: a(l),
            type: a(i).essence
          }, null, 8, ["filename", "href", "type"])
        ]),
        key: "0"
      } : void 0
    ]), 1024));
  }
});
export {
  X as default
};
