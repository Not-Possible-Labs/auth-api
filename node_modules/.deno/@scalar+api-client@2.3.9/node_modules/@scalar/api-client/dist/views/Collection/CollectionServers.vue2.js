import { defineComponent as w, ref as C, computed as D, openBlock as n, createElementBlock as v, createElementVNode as i, createStaticVNode as A, Fragment as M, renderList as N, createBlock as p, unref as e, toDisplayString as z, createVNode as l, withCtx as a, createCommentVNode as I } from "vue";
import { useModal as $, ScalarMarkdown as j, ScalarDropdown as B, ScalarDropdownItem as E, ScalarIcon as m, ScalarButton as x, ScalarModal as U } from "@scalar/components";
import V from "../../components/Sidebar/Actions/DeleteSidebarListElement.vue.js";
import { useActiveEntities as L } from "../../store/active-entities.js";
import P from "./CollectionServerForm.vue.js";
import { useWorkspace as F } from "../../store/store.js";
const O = { class: "flex h-full w-full flex-col gap-12 px-1.5 pt-8" }, R = { class: "flex flex-col gap-4" }, T = { class: "bg-b-2 overflow-hidden rounded-lg border" }, W = { class: "flex items-center justify-between py-1 pl-3 pr-1 text-sm" }, Y = { key: 1 }, q = { class: "text-c-3 flex h-full items-center justify-center rounded-lg border p-4" }, te = /* @__PURE__ */ w({
  __name: "CollectionServers",
  setup(G) {
    const { activeCollection: o } = L(), { servers: f, events: h, serverMutators: _ } = F(), u = $(), d = C(null), S = D(() => {
      var s;
      return !f || !((s = o.value) != null && s.servers) ? [] : Object.values(f).filter(
        (t) => {
          var c;
          return (c = o.value) == null ? void 0 : c.servers.includes(t.uid);
        }
      );
    }), b = () => h.commandPalette.emit({
      commandName: "Add Server"
    }), g = () => {
      var s;
      !((s = o.value) != null && s.uid) || !d.value || (_.delete(d.value, o.value.uid), u.hide());
    }, k = (s) => {
      d.value = s, u.show();
    };
    return (s, t) => {
      var c;
      return n(), v("div", O, [
        i("div", R, [
          t[3] || (t[3] = A('<div class="flex items-start justify-between gap-2"><div class="flex flex-col"><div class="flex h-8 items-center"><h3 class="font-bold">Servers</h3></div><p class="text-sm"> Add different base URLs for your API. You can use <code class="font-code text-c-2">{variables}</code> for dynamic parts. </p></div></div>', 1)),
          (n(!0), v(M, null, N(S.value, (r, y) => (n(), v("div", {
            key: r.uid
          }, [
            i("div", T, [
              i("div", W, [
                r.description ? (n(), p(e(j), {
                  key: 0,
                  value: r.description
                }, null, 8, ["value"])) : (n(), v("span", Y, "Server " + z(y + 1), 1)),
                l(e(B), { placement: "bottom-end" }, {
                  items: a(() => [
                    l(e(E), {
                      class: "flex gap-2 font-normal",
                      onClick: (H) => k(r.uid)
                    }, {
                      default: a(() => [
                        l(e(m), {
                          class: "inline-flex",
                          icon: "Delete",
                          size: "sm",
                          thickness: "1.5"
                        }),
                        t[1] || (t[1] = i("span", null, "Delete", -1))
                      ]),
                      _: 2
                    }, 1032, ["onClick"])
                  ]),
                  default: a(() => [
                    l(e(x), {
                      class: "hover:bg-b-3 h-full max-h-8 gap-1 p-1 text-xs",
                      variant: "ghost"
                    }, {
                      default: a(() => [
                        l(e(m), {
                          class: "text-c-3",
                          icon: "Ellipses",
                          size: "md"
                        })
                      ]),
                      _: 1
                    })
                  ]),
                  _: 2
                }, 1024)
              ]),
              e(o) ? (n(), p(P, {
                key: 0,
                collectionId: e(o).uid,
                serverUid: r.uid
              }, null, 8, ["collectionId", "serverUid"])) : I("", !0)
            ])
          ]))), 128)),
          i("div", q, [
            l(e(x), {
              class: "hover:bg-b-2 hover:text-c-1 flex items-center gap-2",
              size: "sm",
              variant: "ghost",
              onClick: b
            }, {
              default: a(() => [
                l(e(m), {
                  class: "inline-flex",
                  icon: "Add",
                  size: "sm",
                  thickness: "1.5"
                }),
                t[2] || (t[2] = i("span", null, "Add Server", -1))
              ]),
              _: 1
            })
          ])
        ]),
        l(e(U), {
          size: "xxs",
          state: e(u),
          title: `Delete ${d.value ? (c = e(f)[d.value]) == null ? void 0 : c.url : "Server"}`
        }, {
          default: a(() => [
            l(V, {
              variableName: "Server",
              warningMessage: "Are you sure you want to delete this server? This action cannot be undone.",
              onClose: t[0] || (t[0] = (r) => e(u).hide()),
              onDelete: g
            })
          ]),
          _: 1
        }, 8, ["state", "title"])
      ]);
    };
  }
});
export {
  te as default
};
