import { defineComponent as b, ref as d, computed as C, openBlock as n, createBlock as s, normalizeClass as B, withCtx as $, createElementBlock as u, renderSlot as i, createTextVNode as g, createCommentVNode as p, createElementVNode as O, Fragment as I, mergeProps as v, unref as h } from "vue";
import { ScalarIconButton as A } from "@scalar/components";
import q from "../CodeInput/CodeInput.vue.js";
import E from "./DataTableCell.vue.js";
import F from "./DataTableInputSelect.vue.js";
const S = ["for"], T = { class: "row-1 overflow-x-auto" }, N = ["readOnly", "type", "value"], P = {
  key: 1,
  class: "centered-y text-orange absolute right-7 text-xs"
}, W = /* @__PURE__ */ b({
  inheritAttrs: !1,
  __name: "DataTableInput",
  props: {
    id: {},
    type: {},
    containerClass: {},
    required: { type: Boolean, default: !1 },
    modelValue: {},
    canAddCustomEnumValue: { type: Boolean, default: !0 },
    readOnly: { type: Boolean, default: !1 },
    enum: {},
    min: {},
    max: {},
    environment: {},
    envVariables: {},
    workspace: {},
    description: {}
  },
  emits: ["update:modelValue", "inputFocus", "inputBlur", "selectVariable"],
  setup(y, { emit: c }) {
    const o = y, r = c, t = d(!0), V = d(!1), m = d(null), w = () => {
      V.value || r("inputBlur");
    }, f = C(
      () => o.type === "password" ? t.value ? "password" : "text" : o.type ?? "text"
    ), k = () => {
      var e, l;
      !((e = o.enum) != null && e.length) && !o.readOnly && ((l = m.value) == null || l.focus());
    };
    return (e, l) => (n(), s(E, {
      class: B(["row relative", e.containerClass])
    }, {
      default: $(() => [
        e.$slots.default ? (n(), u("div", {
          key: 0,
          class: "text-c-1 flex items-center pl-3 pr-0",
          for: e.id ?? "",
          onClick: k
        }, [
          i(e.$slots, "default", {}, void 0, !0),
          l[5] || (l[5] = g(": "))
        ], 8, S)) : p("", !0),
        O("div", T, [
          o.enum && o.enum.length ? (n(), s(F, {
            key: 0,
            canAddCustomValue: o.canAddCustomEnumValue,
            modelValue: o.modelValue,
            value: o.enum,
            "onUpdate:modelValue": l[0] || (l[0] = (a) => r("update:modelValue", a))
          }, null, 8, ["canAddCustomValue", "modelValue", "value"])) : (n(), u(I, { key: 1 }, [
            t.value && e.type === "password" ? (n(), u("input", v({ key: 0 }, e.id ? { ...e.$attrs, id: e.id } : e.$attrs, {
              autocomplete: "off",
              class: "text-c-1 disabled:text-c-2 py-1.25 peer w-full min-w-0 border-none px-2 -outline-offset-1",
              "data-1p-ignore": "",
              readOnly: e.readOnly,
              spellcheck: "false",
              type: f.value,
              value: e.modelValue,
              onInput: l[1] || (l[1] = (a) => r(
                "update:modelValue",
                a.target.value ?? ""
              ))
            }), null, 16, N)) : (n(), s(q, v({ key: 1 }, e.$attrs, {
              id: e.id,
              ref_key: "codeInput",
              ref: m,
              class: ["text-c-1 disabled:text-c-2 peer w-full min-w-0 border-none -outline-offset-1", [
                e.type === "password" && e.description && "pr-12",
                e.description && "pr-8"
              ]],
              description: e.description,
              disableCloseBrackets: "",
              disableTabIndent: "",
              envVariables: e.envVariables,
              environment: e.environment,
              max: e.max,
              min: e.min,
              modelValue: e.modelValue ?? "",
              readOnly: e.readOnly,
              required: !!e.required,
              spellcheck: "false",
              type: f.value,
              workspace: e.workspace,
              onBlur: w,
              onFocus: l[2] || (l[2] = (a) => r("inputFocus")),
              "onUpdate:modelValue": l[3] || (l[3] = (a) => r("update:modelValue", a))
            }), null, 16, ["id", "class", "description", "envVariables", "environment", "max", "min", "modelValue", "readOnly", "required", "type", "workspace"]))
          ], 64))
        ]),
        e.$slots.warning ? (n(), u("div", P, [
          i(e.$slots, "warning", {}, void 0, !0)
        ])) : p("", !0),
        i(e.$slots, "icon", {}, void 0, !0),
        e.type === "password" ? (n(), s(h(A), {
          key: 2,
          class: "-ml-.5 mr-1.25 p-1.25 h-6 w-6 self-center",
          icon: t.value ? "Show" : "Hide",
          label: t.value ? "Show Password" : "Hide Password",
          onClick: l[4] || (l[4] = (a) => t.value = !t.value)
        }, null, 8, ["icon", "label"])) : p("", !0)
      ]),
      _: 3
    }, 8, ["class"]));
  }
});
export {
  W as default
};
