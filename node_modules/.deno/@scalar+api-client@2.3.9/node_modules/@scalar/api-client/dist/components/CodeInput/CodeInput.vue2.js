import { defineComponent as H, useAttrs as J, ref as i, toRef as r, watch as Q, computed as I, openBlock as n, createElementBlock as d, Fragment as W, normalizeClass as G, unref as u, createElementVNode as m, toDisplayString as X, createBlock as y, mergeProps as Y, withKeys as g, withModifiers as N, createVNode as Z, createCommentVNode as f, createTextVNode as k, renderSlot as R } from "vue";
import { ScalarIcon as _ } from "@scalar/components";
import { prettyPrintJson as ee } from "@scalar/oas-utils/helpers";
import { useCodeMirror as oe, useDropdown as te, colorPicker as le } from "@scalar/use-codemirror";
import { useClipboard as ne } from "@scalar/use-hooks/useClipboard";
import { nanoid as ae } from "nanoid";
import re from "../../views/Environment/EnvironmentVariableDropdown.vue.js";
import C from "../DataTable/DataTableInputSelect.vue.js";
import { pillPlugin as se, backspaceCommand as de } from "./codeVariableWidget.js";
import { useLayout as ue } from "../../hooks/useLayout.js";
const ie = { class: "whitespace-nowrap" }, pe = ["id"], me = {
  key: 0,
  class: "scalar-code-copy z-context"
}, fe = {
  key: 1,
  class: "z-context text-c-2 absolute bottom-1 right-1.5 hidden font-sans group-has-[:focus-visible]/input:block",
  role: "alert"
}, ce = {
  key: 5,
  class: "centered-y text-orange absolute right-7 text-xs"
}, be = {
  key: 6,
  class: "required centered-y text-xxs text-c-3 group-[.error]:text-red bg-b-1 pointer-events-none absolute right-0 mr-0.5 pr-2 pt-px opacity-100 shadow-[-8px_0_4px_var(--scalar-background-1)] transition-opacity duration-150 group-[.alert]:bg-transparent group-[.error]:bg-transparent group-[.alert]:shadow-none group-[.error]:shadow-none peer-has-[.cm-focused]:opacity-0"
}, ye = {
  inheritAttrs: !1
}, Pe = /* @__PURE__ */ H({
  ...ye,
  __name: "CodeInput",
  props: {
    colorPicker: { type: Boolean, default: !1 },
    disabled: { type: Boolean, default: !1 },
    modelValue: {},
    error: { type: Boolean },
    emitOnBlur: { type: Boolean, default: !0 },
    lineNumbers: { type: Boolean },
    lint: { type: Boolean },
    disableTabIndent: { type: Boolean, default: !1 },
    language: {},
    handleFieldSubmit: {},
    handleFieldChange: {},
    placeholder: {},
    required: { type: Boolean },
    disableEnter: { type: Boolean, default: !1 },
    disableCloseBrackets: { type: Boolean, default: !1 },
    enum: {},
    examples: {},
    type: {},
    nullable: { type: Boolean, default: !1 },
    withVariables: { type: Boolean, default: !0 },
    importCurl: { type: Boolean },
    isCopyable: { type: Boolean, default: !1 },
    default: {},
    environment: {},
    envVariables: {},
    workspace: {}
  },
  emits: ["submit", "update:modelValue", "curl", "blur"],
  setup(A, { expose: M, emit: O }) {
    var q;
    const o = A, s = O, B = J(), K = B.id || `id-${ae()}`, x = i(!1), v = i(!1), S = i(""), P = i({ left: 0, top: 0 }), c = i(null), { layout: w } = ue(), { copyToClipboard: z } = ne();
    function D(e) {
      var t;
      return e === o.modelValue ? null : o.importCurl && e.trim().toLowerCase().startsWith("curl") ? (s("curl", e), (t = a.value) == null || t.dispatch({
        changes: {
          from: 0,
          to: a.value.state.doc.length,
          insert: String(o.modelValue)
        }
      }), null) : o.handleFieldChange ? o.handleFieldChange(e) : s("update:modelValue", e);
    }
    function h(e) {
      return o.handleFieldSubmit ? o.handleFieldSubmit(e) : s("submit", e);
    }
    function T(e) {
      x.value = !1, o.emitOnBlur && o.modelValue && h(e), s("blur", e);
    }
    const V = [];
    o.colorPicker && V.push(le), V.push(
      se({
        environment: o.environment,
        envVariables: o.envVariables,
        workspace: o.workspace,
        isReadOnly: w === "modal"
      }),
      de
    );
    const F = i(null), { codeMirror: a } = oe({
      content: r(
        () => o.modelValue !== void 0 ? String(o.modelValue) : ""
      ),
      onChange: (e) => {
        D(e), U();
      },
      onFocus: () => x.value = !0,
      onBlur: (e) => T(e),
      codeMirrorRef: F,
      disableTabIndent: r(() => o.disableTabIndent),
      disableEnter: r(() => o.disableEnter),
      disableCloseBrackets: r(() => o.disableCloseBrackets),
      lineNumbers: r(() => o.lineNumbers),
      language: r(() => o.language),
      lint: r(() => o.lint),
      extensions: V,
      placeholder: r(() => o.placeholder)
    });
    (q = a.value) == null || q.focus(), Q(a, () => {
      a.value && Object.prototype.hasOwnProperty.call(B, "autofocus") && a.value.focus();
    });
    const { handleDropdownSelect: L, updateDropdownVisibility: U } = te({
      codeMirror: a,
      query: S,
      showDropdown: v,
      dropdownPosition: P
    }), $ = I(
      () => o.nullable ? ["true", "false", "null"] : ["true", "false"]
    ), b = (e, t) => {
      var p, l, E;
      v.value ? e === "down" ? (t.preventDefault(), (p = c.value) == null || p.handleArrowKey("down")) : e === "up" ? (t.preventDefault(), (l = c.value) == null || l.handleArrowKey("up")) : e === "enter" && (t.preventDefault(), (E = c.value) == null || E.handleSelect()) : e === "escape" ? o.disableTabIndent || t.stopPropagation() : e === "enter" && t.target instanceof HTMLDivElement && h(t.target.textContent ?? "");
    }, j = I(() => Array.isArray(o.type) ? (
      // Find the first type, that’s not 'null'
      o.type.find((e) => e !== "null") ?? "string"
    ) : (
      // If it’s not an array, just return the type
      o.type
    ));
    return M({
      /** Expose focus method */
      focus: () => {
        var e;
        (e = a.value) == null || e.focus();
      },
      // Expose these methods for testing
      handleChange: D,
      handleSubmit: h,
      handleBlur: T,
      booleanOptions: $,
      codeMirror: a,
      modelValue: o.modelValue
    }), (e, t) => {
      var p;
      return n(), d(W, null, [
        e.disabled ? (n(), d("div", {
          key: 0,
          class: G(["text-c-2 flex cursor-default items-center justify-center", u(w) === "modal" ? "font-code pl-1 pr-2 text-sm" : "px-2"]),
          "data-testid": "code-input-disabled"
        }, [
          m("span", ie, X(e.modelValue), 1)
        ], 2)) : o.enum && o.enum.length ? (n(), y(C, {
          key: 1,
          default: o.default,
          modelValue: e.modelValue,
          type: j.value,
          value: o.enum,
          "onUpdate:modelValue": t[0] || (t[0] = (l) => s("update:modelValue", l))
        }, null, 8, ["default", "modelValue", "type", "value"])) : e.type === "boolean" || (p = e.type) != null && p.includes("boolean") ? (n(), y(C, {
          key: 2,
          default: o.default,
          modelValue: e.modelValue,
          value: $.value,
          "onUpdate:modelValue": t[1] || (t[1] = (l) => s("update:modelValue", l))
        }, null, 8, ["default", "modelValue", "value"])) : o.examples && o.examples.length ? (n(), y(C, {
          key: 3,
          default: o.default,
          modelValue: o.modelValue,
          value: o.examples,
          "onUpdate:modelValue": t[2] || (t[2] = (l) => s("update:modelValue", l))
        }, null, 8, ["default", "modelValue", "value"])) : (n(), d("div", Y({
          key: 4,
          id: u(K)
        }, e.$attrs, {
          ref_key: "codeMirrorRef",
          ref: F,
          class: ["group/input group-[.alert]:outline-orange group-[.error]:outline-red font-code peer relative w-full overflow-hidden whitespace-nowrap text-xs leading-[1.44] -outline-offset-1 has-[:focus-visible]:rounded-[4px] has-[:focus-visible]:outline", {
            "flow-code-input--error": e.error
          }],
          onKeydown: [
            t[4] || (t[4] = g(N((l) => b("down", l), ["stop"]), ["down"])),
            t[5] || (t[5] = g((l) => b("enter", l), ["enter"])),
            t[6] || (t[6] = g((l) => b("escape", l), ["escape"])),
            t[7] || (t[7] = g(N((l) => b("up", l), ["stop"]), ["up"]))
          ]
        }), [
          e.isCopyable ? (n(), d("div", me, [
            m("button", {
              class: "copy-button",
              type: "button",
              onClick: t[3] || (t[3] = (l) => u(z)(u(ee)(e.modelValue)))
            }, [
              t[8] || (t[8] = m("span", { class: "sr-only" }, "Copy content", -1)),
              Z(u(_), {
                icon: "Clipboard",
                size: "md"
              })
            ])
          ])) : f("", !0),
          e.disableTabIndent ? f("", !0) : (n(), d("div", fe, t[9] || (t[9] = [
            k(" Press "),
            m("kbd", { class: "-mx-0.25 rounded border px-0.5 font-mono" }, "Esc", -1),
            k(" then "),
            m("kbd", { class: "-mx-0.25 rounded border px-0.5 font-mono" }, "Tab", -1),
            k(" to exit ")
          ])))
        ], 16, pe)),
        e.$slots.warning ? (n(), d("div", ce, [
          R(e.$slots, "warning", {}, void 0, !0)
        ])) : f("", !0),
        R(e.$slots, "icon", {}, void 0, !0),
        e.required ? (n(), d("div", be, " Required ")) : f("", !0),
        v.value && e.withVariables && u(w) !== "modal" && e.environment ? (n(), y(re, {
          key: 7,
          ref_key: "dropdownRef",
          ref: c,
          dropdownPosition: P.value,
          envVariables: e.envVariables,
          environment: e.environment,
          query: S.value,
          onSelect: u(L)
        }, null, 8, ["dropdownPosition", "envVariables", "environment", "query", "onSelect"])) : f("", !0)
      ], 64);
    };
  }
});
export {
  Pe as default
};
