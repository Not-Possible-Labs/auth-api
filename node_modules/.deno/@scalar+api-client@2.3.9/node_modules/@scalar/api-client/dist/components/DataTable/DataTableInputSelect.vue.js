import { defineComponent as O, computed as m, ref as w, watch as S, nextTick as E, openBlock as o, createElementBlock as f, createBlock as v, unref as a, withCtx as u, createVNode as n, createElementVNode as d, toDisplayString as y, withDirectives as K, withKeys as M, vModelText as R, Fragment as C, renderList as U, normalizeClass as W, createTextVNode as $, createCommentVNode as _ } from "vue";
import { ScalarComboboxMultiselect as F, ScalarButton as b, ScalarIcon as h, ScalarDropdown as L, ScalarDropdownItem as D, ScalarDropdownDivider as q } from "@scalar/components";
const G = { class: "group-[.alert]:outline-orange group-[.error]:outline-red w-full pr-4 -outline-offset-1 has-[:focus-visible]:rounded-[4px] has-[:focus-visible]:outline" }, H = { class: "text-c-1 whitespace-nowrap" }, J = { class: "text-c-1" }, P = { class: "flex h-4 w-4 items-center justify-center" }, Z = /* @__PURE__ */ O({
  __name: "DataTableInputSelect",
  props: {
    modelValue: {},
    value: {},
    default: {},
    canAddCustomValue: { type: Boolean, default: !0 },
    type: {}
  },
  emits: ["update:modelValue"],
  setup(B, { emit: j }) {
    const s = B, c = j, p = m(() => s.value ?? []), i = w(!1), r = w(""), x = w(null);
    S(r, (e) => {
      c("update:modelValue", e);
    });
    const g = (e) => {
      c("update:modelValue", e), i.value = !1;
    }, z = () => {
      r.value.trim() && g(r.value);
    }, A = () => {
      r.value.trim() || c("update:modelValue", ""), i.value = !1;
    }, N = (e) => s.modelValue.toString() === e;
    S(i, (e) => {
      e && E(() => {
        var t;
        (t = x.value) == null || t.focus();
      });
    });
    const k = m(() => s.modelValue !== void 0 ? s.modelValue : s.default), V = m(() => {
      const e = new Set(s.modelValue.toString().split(", "));
      return p.value.filter((t) => e.has(t)).map((t) => ({ id: t, label: t, value: t }));
    }), T = m(
      () => p.value.map((e) => ({ id: e, label: e, value: e }))
    ), I = (e) => {
      const t = e.map((l) => l.value);
      c("update:modelValue", t.join(", "));
    };
    return (e, t) => (o(), f("div", G, [
      e.type === "array" ? (o(), v(a(F), {
        key: 0,
        modelValue: V.value,
        options: T.value,
        "onUpdate:modelValue": I
      }, {
        default: u(() => [
          n(a(b), {
            class: "custom-scroll h-full justify-start gap-1.5 px-2 py-1.5 pr-6 font-normal outline-none",
            fullWidth: "",
            variant: "ghost"
          }, {
            default: u(() => [
              d("span", H, y(V.value.length > 0 ? V.value.map((l) => l.label).join(", ") : "Select a value"), 1),
              n(a(h), {
                icon: "ChevronDown",
                size: "md"
              })
            ]),
            _: 1
          })
        ]),
        _: 1
      }, 8, ["modelValue", "options"])) : i.value ? K((o(), f("input", {
        key: 1,
        ref_key: "inputRef",
        ref: x,
        "onUpdate:modelValue": t[0] || (t[0] = (l) => r.value = l),
        class: "text-c-1 w-full min-w-0 border-none px-2 py-1.5 outline-none",
        placeholder: "Value",
        type: "text",
        onBlur: A,
        onKeyup: M(z, ["enter"])
      }, null, 544)), [
        [R, r.value]
      ]) : (o(), v(a(L), {
        key: 2,
        resize: "",
        value: k.value
      }, {
        items: u(() => [
          (o(!0), f(C, null, U(p.value, (l) => (o(), v(a(D), {
            key: l,
            class: "group/item flex items-center gap-1.5 overflow-hidden text-ellipsis whitespace-nowrap",
            value: l,
            onClick: (Q) => g(l)
          }, {
            default: u(() => [
              d("div", {
                class: W([
                  "flex h-4 w-4 items-center justify-center rounded-full p-[3px]",
                  N(l) ? "bg-c-accent text-b-1" : "shadow-border text-transparent"
                ])
              }, [
                n(a(h), {
                  class: "size-2.5",
                  icon: "Checkmark",
                  thickness: "3"
                })
              ], 2),
              $(" " + y(l), 1)
            ]),
            _: 2
          }, 1032, ["value", "onClick"]))), 128)),
          e.canAddCustomValue ? (o(), f(C, { key: 0 }, [
            p.value.length ? (o(), v(a(q), { key: 0 })) : _("", !0),
            n(a(D), {
              class: "flex items-center gap-1.5",
              onClick: t[1] || (t[1] = (l) => i.value = !0)
            }, {
              default: u(() => [
                d("div", P, [
                  n(a(h), {
                    icon: "Add",
                    size: "sm"
                  })
                ]),
                t[2] || (t[2] = d("span", null, "Add value", -1))
              ]),
              _: 1
            })
          ], 64)) : _("", !0)
        ]),
        default: u(() => [
          n(a(b), {
            class: "h-full justify-start gap-1.5 overflow-auto whitespace-nowrap px-2 py-1.5 font-normal outline-none",
            fullWidth: "",
            variant: "ghost"
          }, {
            default: u(() => [
              d("span", J, y(k.value || "Select a value"), 1),
              n(a(h), {
                icon: "ChevronDown",
                size: "md"
              })
            ]),
            _: 1
          })
        ]),
        _: 1
      }, 8, ["value"]))
    ]));
  }
});
export {
  Z as default
};
