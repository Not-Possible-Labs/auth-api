import { defineComponent as h, computed as a, watch as y, openBlock as m, createBlock as k, unref as n, withCtx as f, createVNode as S, createElementVNode as g, createTextVNode as p, toDisplayString as x, createElementBlock as U } from "vue";
import { ScalarListbox as V, ScalarButton as b, ScalarIcon as B } from "@scalar/components";
import { useWorkspace as N } from "../../store/store.js";
const W = {
  key: 1,
  class: "gap-0.75 text-c-1 h-6.5 flex w-full items-center whitespace-nowrap rounded-b-lg px-3 py-1.5 text-xs lg:text-sm"
}, E = /* @__PURE__ */ h({
  __name: "ServerSelector",
  props: {
    collection: {},
    server: {},
    target: {}
  },
  emits: ["updateServer"],
  setup(l, { emit: w }) {
    const i = w, { servers: s, collectionMutators: c } = N(), o = a(
      () => {
        var t;
        return (t = l.collection) == null ? void 0 : t.servers.map((e) => {
          var r;
          return {
            id: e,
            label: ((r = s[e]) == null ? void 0 : r.url) ?? "Unknown server"
          };
        });
      }
    ), u = a({
      get: () => l.server ? o.value.find((t) => t.id === l.server.uid) : void 0,
      set: (t) => {
        var r;
        if (!t)
          return;
        c.edit(
          l.collection.uid,
          "selectedServerUid",
          t.id
        );
        const e = (r = s[t.id]) == null ? void 0 : r.url;
        e && i("updateServer", e);
      }
    });
    y(
      () => l.collection,
      (t) => {
        var r, v;
        if (!t || t.selectedServerUid)
          return;
        const e = (r = l.collection.servers) == null ? void 0 : r[0];
        e && (c.edit(l.collection.uid, "selectedServerUid", e), (v = s[e]) != null && v.url && i("updateServer", s[e].url));
      }
    );
    const d = a(() => {
      var t, e, r;
      return (e = (t = l.server) == null ? void 0 : t.url) != null && e.endsWith("/") ? l.server.url.slice(0, -1) : ((r = l.server) == null ? void 0 : r.url) || "";
    });
    return (t, e) => o.value.length > 1 ? (m(), k(n(V), {
      key: 0,
      modelValue: u.value,
      "onUpdate:modelValue": e[0] || (e[0] = (r) => u.value = r),
      options: o.value,
      placement: "bottom-start",
      resize: "",
      target: t.target,
      teleport: `#${t.target}`
    }, {
      default: f(() => [
        S(n(b), {
          class: "gap-0.75 text-c-1 h-6.5 w-full justify-start whitespace-nowrap rounded-b-lg px-3 py-1.5 text-xs font-normal -outline-offset-1 lg:text-sm",
          variant: "ghost"
        }, {
          default: f(() => [
            e[1] || (e[1] = g("span", { class: "sr-only" }, "Server:", -1)),
            p(" " + x(d.value) + " ", 1),
            S(n(B), {
              class: "text-c-2",
              icon: "ChevronDown",
              size: "sm"
            })
          ]),
          _: 1
        })
      ]),
      _: 1
    }, 8, ["modelValue", "options", "target", "teleport"])) : (m(), U("div", W, [
      e[2] || (e[2] = g("span", { class: "sr-only" }, "Server:", -1)),
      p(" " + x(d.value), 1)
    ]));
  }
});
export {
  E as default
};
