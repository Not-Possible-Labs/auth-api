import { defineComponent as g, computed as a, openBlock as c, createBlock as y, unref as t, withCtx as q, createElementVNode as l, normalizeClass as s, toDisplayString as p, createElementBlock as k } from "vue";
import { cva as w, ScalarListbox as x, cx as m } from "@scalar/components";
import { getHttpMethodInfo as f, REQUEST_METHODS as B } from "@scalar/oas-utils/helpers";
const H = /* @__PURE__ */ g({
  __name: "HttpMethod",
  props: {
    isSquare: { type: Boolean, default: !1 },
    method: {},
    isEditable: { type: Boolean, default: !1 }
  },
  emits: ["change"],
  setup(b, { emit: h }) {
    const r = b, v = h, o = a(() => f(r.method)), n = Object.entries(B).map(([e]) => ({
      id: e,
      label: e.toUpperCase(),
      color: f(e).color
    })), i = a({
      get: () => n.find(({ id: e }) => e === r.method),
      set: (e) => (e == null ? void 0 : e.id) && v("change", e.id)
    }), d = w({
      base: "text-center font-code text-3xs justify-center items-center flex",
      variants: {
        isSquare: {
          true: "px-2.5 whitespace-nowrap font-bold border-r h-fit m-auto",
          false: "rounded-full"
        },
        isEditable: {
          true: "http-bg-gradient rounded-md border-1/2 border-r-1/2",
          false: "cursor-auto"
        }
      }
    }), E = a(() => o.value.short);
    return (e, u) => e.isEditable ? (c(), y(t(x), {
      key: 0,
      modelValue: i.value,
      "onUpdate:modelValue": u[0] || (u[0] = (S) => i.value = S),
      class: "font-code scalar-client mt-1 text-sm",
      options: t(n)
    }, {
      default: q(() => [
        l("div", {
          class: s(["h-full", { "pointer-events-none": !e.isEditable }])
        }, [
          l("button", {
            class: s(["relative h-full", t(m)(t(d)({ isSquare: e.isSquare, isEditable: e.isEditable }), o.value.color)]),
            type: "button"
          }, [
            l("span", null, p(E.value), 1)
          ], 2)
        ], 2)
      ]),
      _: 1
    }, 8, ["modelValue", "options"])) : (c(), k("div", {
      key: 1,
      class: s(["relative gap-1 whitespace-nowrap", t(m)(t(d)({ isSquare: e.isSquare, isEditable: e.isEditable }), o.value.color)]),
      type: "button"
    }, p(o.value.short), 3));
  }
});
export {
  H as default
};
