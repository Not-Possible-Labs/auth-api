import { defineComponent as G, ref as R, computed as k, watch as D, openBlock as n, createBlock as S, unref as s, withCtx as v, createElementVNode as w, createVNode as C, createTextVNode as f, createElementBlock as u, Fragment as g, toDisplayString as V, createCommentVNode as H } from "vue";
import { useLoadingState as K, ScalarButton as T, ScalarIcon as Q, ScalarTooltip as X, ScalarCodeBlock as Z } from "@scalar/components";
import { useToasts as ee } from "@scalar/use-toasts";
import { useRouter as te } from "vue-router";
import { importCurlCommand as oe } from "../../libs/importers/curl.js";
import { useActiveEntities as ae } from "../../store/active-entities.js";
import le from "./CommandActionForm.vue.js";
import ne from "./CommandActionInput.vue.js";
import re from "./WatchModeToggle.vue.js";
import { isPostmanCollection as _, getPostmanDocumentDetails as ie, convertPostmanToOpenApi as F } from "../../libs/postman.js";
import { getOpenApiDocumentDetails as se } from "../../libs/getOpenApiDocumentDetails.js";
import { isUrl as U } from "../../libs/isUrl.js";
import { useFileDialog as ce } from "../../hooks/useFileDialog.js";
import { PathId as M } from "../../routes.js";
import { useWorkspace as ue } from "../../store/store.js";
const me = { class: "flex justify-between" }, de = { class: "flex w-full flex-row items-center justify-between gap-3" }, pe = { class: "w-content bg-b-1 text-xxs text-c-1 pointer-events-none z-10 grid max-w-[320px] gap-1.5 rounded p-2 leading-5 shadow-lg" }, ve = { class: "text-c-2 flex items-center" }, fe = {
  key: 0,
  class: "text-pretty"
}, ge = {
  key: 1,
  class: "text-pretty"
}, De = /* @__PURE__ */ G({
  __name: "CommandPaletteImport",
  emits: ["close", "back"],
  setup(ye, { emit: N }) {
    const P = N, $ = te(), { activeWorkspace: m, activeCollection: B } = ae(), { importSpecFile: b, importSpecFromUrl: W, events: j } = ue(), { toast: d } = ee(), p = K(), a = R(""), y = R(!0), i = k(() => _(a.value) ? ie(a.value) : se(a.value)), A = k(
      () => i.value ? i.value.type : "json"
    );
    function x(t) {
      var e;
      t && $.push({
        name: "collection",
        params: {
          [M.Workspace]: (e = m.value) == null ? void 0 : e.uid,
          [M.Collection]: t.uid
        }
      });
    }
    const h = k(() => U(a.value)), z = k(() => !!i.value), { open: E } = ce({
      onChange: async (t) => {
        const e = t == null ? void 0 : t[0];
        if (e) {
          const r = new FileReader();
          r.onload = async (I) => {
            var c, L, O;
            const o = (c = I.target) == null ? void 0 : c.result;
            try {
              if (_(o)) {
                const l = await b(
                  await F(o),
                  ((L = m.value) == null ? void 0 : L.uid) ?? ""
                );
                x(l == null ? void 0 : l.collection);
              } else {
                const l = await b(
                  o,
                  ((O = m.value) == null ? void 0 : O.uid) ?? ""
                );
                x(l == null ? void 0 : l.collection);
              }
              d("Import successful", "info"), P("close");
            } catch (l) {
              console.error(l);
              const q = (l == null ? void 0 : l.message) || "Unknown error";
              d(`Import failed: ${q}`, "error");
            }
          }, r.readAsText(e);
        }
      },
      multiple: !1,
      accept: ".json,.yaml,.yml"
    });
    D(h, (t) => {
      t || (y.value = !1);
    }), D(a, (t) => {
      U(t) || (y.value = !1);
    });
    async function J() {
      var t, e, r, I;
      if (!(!a.value || p.isLoading)) {
        p.startLoading();
        try {
          if (h.value) {
            const [o, c] = await W(
              a.value,
              ((t = m.value) == null ? void 0 : t.uid) ?? "",
              {
                proxyUrl: (e = m.value) == null ? void 0 : e.proxyUrl,
                watchMode: y.value
              }
            );
            if (x(c == null ? void 0 : c.collection), o) {
              d(
                "There was a possible CORS error while importing your spec, please make sure this server is allowed in the CORS policy of your OpenAPI document.",
                "error",
                { timeout: 5e3 }
              ), p.invalidate(2e3, !0);
              return;
            }
          } else if (z.value)
            if (_(a.value)) {
              const o = await b(
                await F(a.value),
                ((r = m.value) == null ? void 0 : r.uid) ?? ""
              );
              x(o == null ? void 0 : o.collection), d("Successfully converted Postman collection", "info");
            } else {
              const o = await b(
                a.value,
                ((I = m.value) == null ? void 0 : I.uid) ?? ""
              );
              x(o == null ? void 0 : o.collection);
            }
          else {
            d("Import failed: Invalid URL or OpenAPI document", "error"), p.invalidate(2e3, !0);
            return;
          }
          p.clear(), P("close"), d("Import successful", "info");
        } catch (o) {
          console.error("[importCollection]", o);
          const c = (o == null ? void 0 : o.message) || "Unknown error";
          p.invalidate(2e3, !0), d(`Import failed: ${c}`, "error");
        }
      }
    }
    const Y = (t) => {
      var e;
      if (t.trim().toLowerCase().startsWith("curl")) {
        j.commandPalette.emit({
          commandName: "Import from cURL",
          metaData: {
            parsedCurl: oe(t),
            collectionUid: (e = B.value) == null ? void 0 : e.uid
          }
        });
        return;
      }
      a.value = t;
    };
    return (t, e) => (n(), S(le, {
      disabled: !a.value.trim(),
      loading: s(p),
      onSubmit: J
    }, {
      options: v(() => [
        w("div", de, [
          C(s(T), {
            class: "hover:bg-b-2 relative max-h-8 gap-1.5 p-2 text-xs",
            variant: "outlined",
            onClick: s(E)
          }, {
            default: v(() => [
              e[5] || (e[5] = f(" JSON, or YAML File ")),
              C(s(Q), {
                class: "text-c-3",
                icon: "UploadSimple",
                size: "md"
              })
            ]),
            _: 1
          }, 8, ["onClick"]),
          C(s(X), {
            as: "div",
            class: "z-[10001]",
            side: "bottom",
            sideOffset: 5
          }, {
            trigger: v(() => [
              C(re, {
                modelValue: y.value,
                "onUpdate:modelValue": e[2] || (e[2] = (r) => y.value = r),
                disabled: !h.value
              }, null, 8, ["modelValue", "disabled"])
            ]),
            content: v(() => [
              w("div", pe, [
                w("div", ve, [
                  h.value ? (n(), u("span", fe, " Automatically updates the API client when the OpenAPI URL content changes, ensuring your client remains up-to-date. ")) : (n(), u("span", ge, " Watch Mode is only available for URL imports. It automatically updates the API client when the OpenAPI URL content changes. "))
                ])
              ])
            ]),
            _: 1
          })
        ])
      ]),
      submit: v(() => [
        e[6] || (e[6] = f(" Import ")),
        h.value ? (n(), u(g, { key: 0 }, [
          f(" from URL ")
        ], 64)) : i.value && A.value ? (n(), u(g, { key: 1 }, [
          i.value.title ? (n(), u(g, { key: 0 }, [
            f(' "' + V(i.value.title) + '" ', 1)
          ], 64)) : (n(), u(g, { key: 1 }, [
            f(V(i.value.version), 1)
          ], 64))
        ], 64)) : (n(), u(g, { key: 2 }, [
          f(" Collection ")
        ], 64))
      ]),
      default: v(() => [
        !i.value || s(U)(a.value) ? (n(), S(ne, {
          key: 0,
          modelValue: a.value,
          placeholder: "OpenAPI/Swagger/Postman URL or cURL",
          onOnDelete: e[0] || (e[0] = (r) => P("back", r)),
          "onUpdate:modelValue": Y
        }, null, 8, ["modelValue"])) : (n(), u(g, { key: 1 }, [
          w("div", me, [
            e[4] || (e[4] = w("div", { class: "text-c-2 min-h-8 py-2 pl-8 text-xs" }, "Preview", -1)),
            C(s(T), {
              class: "hover:bg-b-2 relative ml-auto max-h-8 gap-1.5 p-2 text-xs",
              variant: "ghost",
              onClick: e[1] || (e[1] = (r) => a.value = "")
            }, {
              default: v(() => e[3] || (e[3] = [
                f(" Clear ")
              ])),
              _: 1
            })
          ]),
          i.value && !s(U)(a.value) ? (n(), S(s(Z), {
            key: 0,
            class: "bg-b-2 mt-1 max-h-[40dvh] rounded border [--scalar-small:--scalar-font-size-4]",
            content: a.value,
            copy: !1,
            lang: A.value
          }, null, 8, ["content", "lang"])) : H("", !0)
        ], 64))
      ]),
      _: 1
    }, 8, ["disabled", "loading"]));
  }
});
export {
  De as default
};
