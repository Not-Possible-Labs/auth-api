import { defineComponent as v, useId as b, openBlock as l, createBlock as r, createSlots as c, withCtx as o, createElementVNode as n, unref as t, createElementBlock as m, Fragment as y, renderList as h, normalizeClass as V, createVNode as p, toDisplayString as f, createCommentVNode as g, renderSlot as w } from "vue";
import { ScalarIcon as E } from "@scalar/components";
import C from "../DataTable/DataTable.vue.js";
import S from "../DataTable/DataTableInput.vue.js";
import U from "../DataTable/DataTableRow.vue.js";
import $ from "../ViewLayout/ViewLayoutSection.vue.js";
import { useActiveEntities as B } from "../../store/active-entities.js";
const D = { key: 0 }, F = { class: "custom-scroll flex flex-1 flex-col gap-1.5" }, I = ["for"], N = { class: "bg-b-2 flex-center border-l px-2" }, q = /* @__PURE__ */ v({
  __name: "Form",
  props: {
    title: {},
    options: {},
    data: {},
    onUpdate: { type: Function }
  },
  setup(z) {
    const { activeEnvVariables: u, activeEnvironment: k, activeWorkspace: s } = B(), i = b();
    return (e, T) => (l(), r($, null, c({
      default: o(() => [
        n("div", F, [
          Object.keys(e.data).length > 0 && t(s) ? (l(), r(C, {
            key: 0,
            columns: [""]
          }, {
            default: o(() => [
              (l(!0), m(y, null, h(e.options, (a, d) => (l(), r(U, {
                key: d,
                class: V({ "border-t": d === 0 })
              }, {
                default: o(() => [
                  p(S, {
                    id: t(i),
                    envVariables: t(u),
                    environment: t(k),
                    modelValue: e.data[a.key] ?? "",
                    placeholder: a.placeholder,
                    workspace: t(s),
                    "onUpdate:modelValue": (_) => e.onUpdate(a.key, _)
                  }, c({
                    default: o(() => [
                      n("label", { for: t(i) }, f(a.label), 9, I)
                    ]),
                    _: 2
                  }, [
                    a.key === "description" ? {
                      name: "icon",
                      fn: o(() => [
                        n("div", N, [
                          p(t(E), {
                            icon: "Markdown",
                            size: "lg"
                          })
                        ])
                      ]),
                      key: "0"
                    } : void 0
                  ]), 1032, ["id", "envVariables", "environment", "modelValue", "placeholder", "workspace", "onUpdate:modelValue"])
                ]),
                _: 2
              }, 1032, ["class"]))), 128))
            ]),
            _: 1
          })) : g("", !0)
        ])
      ]),
      _: 2
    }, [
      e.title || e.$slots.title ? {
        name: "title",
        fn: o(() => [
          e.title ? (l(), m("span", D, f(e.title), 1)) : w(e.$slots, "title", { key: 1 })
        ]),
        key: "0"
      } : void 0
    ]), 1024));
  }
});
export {
  q as default
};
