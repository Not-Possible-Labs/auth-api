import { type ErrorResponse } from '../libs';
import type { StoreContext } from '../store/store-context';
import { type ImportSpecToWorkspaceArgs } from '@scalar/oas-utils/transforms';
import type { OpenAPIV3, OpenAPIV3_1 } from '@scalar/openapi-types';
import type { ApiReferenceConfiguration } from '@scalar/types/api-reference';
/** Maps the specs by URL */
export declare const specDictionary: Record<string, {
    hash: number;
    schema: OpenAPIV3.Document | OpenAPIV3_1.Document;
}>;
type ImportSpecFileArgs = ImportSpecToWorkspaceArgs & Pick<ApiReferenceConfiguration, 'servers'>;
/** Generate the import functions from a store context */
export declare function importSpecFileFactory({ requestMutators, collectionMutators, serverMutators, tagMutators, securitySchemeMutators, requestExampleMutators, workspaceMutators, workspaces, }: StoreContext): {
    importSpecFile: (_spec: string | Record<string, any>, workspaceUid: string, options?: ImportSpecFileArgs) => Promise<{
        error: false;
        collection: import("@scalar/oas-utils/entities/spec").Collection;
        requests: import("@scalar/oas-utils/entities/spec").Request[];
        schema: OpenAPIV3_1.Document;
        examples: import("@scalar/oas-utils/entities/spec").RequestExample[];
        servers: import("@scalar/oas-utils/entities/spec").Server[];
        tags: import("@scalar/oas-utils/entities/spec").Tag[];
        securitySchemes: ({
            uid: string & import("zod").BRAND<"securityScheme">;
            name: string;
            value: string;
            type: "apiKey";
            in: "cookie" | "query" | "header";
            nameKey: string;
            description?: string | undefined;
        } | {
            uid: string & import("zod").BRAND<"securityScheme">;
            type: "http";
            password: string;
            nameKey: string;
            scheme: "basic" | "bearer";
            bearerFormat: string;
            username: string;
            token: string;
            description?: string | undefined;
        } | {
            uid: string & import("zod").BRAND<"securityScheme">;
            type: "openIdConnect";
            nameKey: string;
            openIdConnectUrl: string;
            description?: string | undefined;
        } | {
            uid: string & import("zod").BRAND<"securityScheme">;
            type: "oauth2";
            nameKey: string;
            flows: {
                password?: {
                    type: "password";
                    password: string;
                    username: string;
                    token: string;
                    refreshUrl: string;
                    scopes: Record<string, string>;
                    selectedScopes: string[];
                    "x-scalar-client-id": string;
                    tokenUrl: string;
                    clientSecret: string;
                } | undefined;
                implicit?: {
                    type: "implicit";
                    token: string;
                    refreshUrl: string;
                    scopes: Record<string, string>;
                    selectedScopes: string[];
                    "x-scalar-client-id": string;
                    authorizationUrl: string;
                    "x-scalar-redirect-uri": string;
                } | undefined;
                clientCredentials?: {
                    type: "clientCredentials";
                    token: string;
                    refreshUrl: string;
                    scopes: Record<string, string>;
                    selectedScopes: string[];
                    "x-scalar-client-id": string;
                    tokenUrl: string;
                    clientSecret: string;
                } | undefined;
                authorizationCode?: {
                    type: "authorizationCode";
                    token: string;
                    refreshUrl: string;
                    scopes: Record<string, string>;
                    selectedScopes: string[];
                    "x-scalar-client-id": string;
                    authorizationUrl: string;
                    "x-scalar-redirect-uri": string;
                    tokenUrl: string;
                    clientSecret: string;
                    "x-usePkce": "SHA-256" | "plain" | "no";
                } | undefined;
            };
            description?: string | undefined;
        })[];
    } | undefined>;
    importSpecFromUrl: (url: string, workspaceUid: string, { proxyUrl, ...options }?: Omit<ImportSpecFileArgs, "documentUrl"> & Pick<ApiReferenceConfiguration, "proxyUrl">) => Promise<ErrorResponse<Awaited<ReturnType<(_spec: string | Record<string, any>, workspaceUid: string, options?: ImportSpecFileArgs) => Promise<{
        error: false;
        collection: import("@scalar/oas-utils/entities/spec").Collection;
        requests: import("@scalar/oas-utils/entities/spec").Request[];
        schema: OpenAPIV3_1.Document;
        examples: import("@scalar/oas-utils/entities/spec").RequestExample[];
        servers: import("@scalar/oas-utils/entities/spec").Server[];
        tags: import("@scalar/oas-utils/entities/spec").Tag[];
        securitySchemes: ({
            uid: string & import("zod").BRAND<"securityScheme">;
            name: string;
            value: string;
            type: "apiKey";
            in: "cookie" | "query" | "header";
            nameKey: string;
            description?: string | undefined;
        } | {
            uid: string & import("zod").BRAND<"securityScheme">;
            type: "http";
            password: string;
            nameKey: string;
            scheme: "basic" | "bearer";
            bearerFormat: string;
            username: string;
            token: string;
            description?: string | undefined;
        } | {
            uid: string & import("zod").BRAND<"securityScheme">;
            type: "openIdConnect";
            nameKey: string;
            openIdConnectUrl: string;
            description?: string | undefined;
        } | {
            uid: string & import("zod").BRAND<"securityScheme">;
            type: "oauth2";
            nameKey: string;
            flows: {
                password?: {
                    type: "password";
                    password: string;
                    username: string;
                    token: string;
                    refreshUrl: string;
                    scopes: Record<string, string>;
                    selectedScopes: string[];
                    "x-scalar-client-id": string;
                    tokenUrl: string;
                    clientSecret: string;
                } | undefined;
                implicit?: {
                    type: "implicit";
                    token: string;
                    refreshUrl: string;
                    scopes: Record<string, string>;
                    selectedScopes: string[];
                    "x-scalar-client-id": string;
                    authorizationUrl: string;
                    "x-scalar-redirect-uri": string;
                } | undefined;
                clientCredentials?: {
                    type: "clientCredentials";
                    token: string;
                    refreshUrl: string;
                    scopes: Record<string, string>;
                    selectedScopes: string[];
                    "x-scalar-client-id": string;
                    tokenUrl: string;
                    clientSecret: string;
                } | undefined;
                authorizationCode?: {
                    type: "authorizationCode";
                    token: string;
                    refreshUrl: string;
                    scopes: Record<string, string>;
                    selectedScopes: string[];
                    "x-scalar-client-id": string;
                    authorizationUrl: string;
                    "x-scalar-redirect-uri": string;
                    tokenUrl: string;
                    clientSecret: string;
                    "x-usePkce": "SHA-256" | "plain" | "no";
                } | undefined;
            };
            description?: string | undefined;
        })[];
    } | undefined>>>>>;
};
export {};
//# sourceMappingURL=import-spec.d.ts.map