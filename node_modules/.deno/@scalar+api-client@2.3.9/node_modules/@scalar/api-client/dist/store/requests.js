import { requestSchema as y, createExampleFromRequest as F } from "@scalar/oas-utils/entities/spec";
import { LS_KEYS as T, schemaModel as A, iterateTitle as D } from "@scalar/oas-utils/helpers";
import { mutationFactory as I } from "@scalar/object-utils/mutator-record";
import { reactive as S } from "vue";
function C(q) {
  const f = S({}), p = I(f, S({}), q && T.REQUEST);
  return {
    requests: f,
    requestMutators: p
  };
}
function L({
  requestExamples: q,
  requestExampleMutators: f,
  requestMutators: p,
  collectionMutators: m,
  collections: n,
  tags: c,
  tagMutators: R
}, E) {
  return {
    addRequest: (r, t) => {
      var l;
      const e = A(r, y, !1);
      if (!e)
        return console.error("INVALID REQUEST DATA", r);
      const s = n[t], u = F(
        e,
        D(
          (e.summary ?? "Example") + " #1",
          (h) => e.examples.some((a) => {
            var o;
            return h === ((o = q[a]) == null ? void 0 : o.name);
          })
        )
      );
      return e.examples.push(u.uid), p.add(e), f.add(u), s && m.edit(t, "requests", [...s.requests, e.uid]), (l = e.tags) != null && l.length ? e.tags.forEach((h) => {
        const a = s == null ? void 0 : s.tags.find((o) => {
          var x;
          return ((x = c[o]) == null ? void 0 : x.name) === h;
        });
        a && c[a] ? R.edit(a, "children", [...c[a].children, e.uid]) : E({ name: h, children: [e.uid] }, t);
      }) : s && m.edit(t, "children", [...s.children, e.uid]), e;
    },
    deleteRequest: (r, t) => {
      var s;
      const e = n[t];
      r.examples.forEach((u) => f.delete(u)), e && (m.edit(
        t,
        "requests",
        e.requests.filter((u) => u !== r.uid)
      ), m.edit(
        t,
        "children",
        e.children.filter((u) => u !== r.uid)
      ), (s = r.tags) == null || s.forEach((u) => {
        var h;
        const l = e.tags.find((a) => {
          var o;
          return ((o = c[a]) == null ? void 0 : o.name) === u;
        });
        l && R.edit(l, "children", ((h = c[l]) == null ? void 0 : h.children.filter((a) => a !== r.uid)) || []);
      })), p.delete(r.uid);
    },
    findRequestParents: O({ collections: n, tags: c })
  };
}
function O({
  collections: q,
  tags: f
}) {
  function p(m) {
    const n = Object.values(q).find((d) => {
      var i;
      return (i = d.requests) == null ? void 0 : i.includes(m.uid);
    });
    if (!n)
      return [];
    const c = Object.keys(f).reduce(
      (d, i) => (d[i] = [], d),
      { [n == null ? void 0 : n.uid]: [] }
    );
    function R(d, i) {
      i.forEach((r) => {
        var t;
        return (t = c[r]) == null ? void 0 : t.push(...d.children);
      }), d.children.forEach((r) => {
        f[r] && R(f[r], [...i, r]);
      });
    }
    R(n, [n.uid]);
    const E = /* @__PURE__ */ new Set();
    return Object.entries(c).forEach(([d, i]) => {
      i.includes(m.uid) && E.add(d);
    }), [...E];
  }
  return p;
}
function Q() {
  return { request: y.parse({
    method: "get",
    parameters: [],
    path: "",
    summary: "My First Request",
    examples: []
  }) };
}
export {
  Q as createInitialRequest,
  C as createStoreRequests,
  L as extendedRequestDataFactory,
  O as findRequestParentsFactory
};
