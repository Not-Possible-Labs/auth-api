import type { extendedTagDataFactory } from '../store/tags';
import { type Collection, type Request, type RequestPayload, type Tag } from '@scalar/oas-utils/entities/spec';
import type { StoreContext } from './store-context';
/** Create top level request handlers for a workspace */
export declare function createStoreRequests(useLocalStorage: boolean): {
    requests: Record<string, {
        uid: string & import("zod").BRAND<"operation">;
        path: string;
        type: "request";
        selectedSecuritySchemeUids: ((string & import("zod").BRAND<"securityScheme">) | (string & import("zod").BRAND<"securityScheme">)[])[];
        selectedServerUid: (string & import("zod").BRAND<"server">) | null;
        servers: (string & import("zod").BRAND<"server">)[];
        examples: (string & import("zod").BRAND<"example">)[];
        method: "options" | "connect" | "delete" | "get" | "head" | "patch" | "post" | "put" | "trace";
        description?: string | undefined;
        summary?: string | undefined;
        externalDocs?: {
            url: string;
            description?: string | undefined;
        } | undefined;
        'x-internal'?: boolean | undefined;
        'x-scalar-ignore'?: boolean | undefined;
        security?: Record<string, string[]>[] | undefined;
        tags?: string[] | undefined;
        deprecated?: boolean | undefined;
        operationId?: string | undefined;
        parameters?: {
            name: string;
            required: boolean;
            in: "cookie" | "path" | "query" | "header";
            deprecated: boolean;
            description?: string | undefined;
            example?: unknown;
            schema?: unknown;
            content?: unknown;
            style?: "matrix" | "simple" | "form" | "label" | "spaceDelimited" | "pipeDelimited" | "deepObject" | undefined;
            examples?: unknown[] | Record<string, {
                value?: unknown;
                summary?: string | undefined;
            }> | undefined;
        }[] | undefined;
        requestBody?: any;
        responses?: Record<string, any> | undefined;
        'x-scalar-stability'?: import("@scalar/types").XScalarStability | undefined;
    }>;
    requestMutators: {
        add: (item: {
            uid: string & import("zod").BRAND<"operation">;
            path: string;
            type: "request";
            selectedSecuritySchemeUids: ((string & import("zod").BRAND<"securityScheme">) | (string & import("zod").BRAND<"securityScheme">)[])[];
            selectedServerUid: (string & import("zod").BRAND<"server">) | null;
            servers: (string & import("zod").BRAND<"server">)[];
            examples: (string & import("zod").BRAND<"example">)[];
            method: "options" | "connect" | "delete" | "get" | "head" | "patch" | "post" | "put" | "trace";
            description?: string | undefined;
            summary?: string | undefined;
            externalDocs?: {
                url: string;
                description?: string | undefined;
            } | undefined;
            'x-internal'?: boolean | undefined;
            'x-scalar-ignore'?: boolean | undefined;
            security?: Record<string, string[]>[] | undefined;
            tags?: string[] | undefined;
            deprecated?: boolean | undefined;
            operationId?: string | undefined;
            parameters?: {
                name: string;
                required: boolean;
                in: "cookie" | "path" | "query" | "header";
                deprecated: boolean;
                description?: string | undefined;
                example?: unknown;
                schema?: unknown;
                content?: unknown;
                style?: "matrix" | "simple" | "form" | "label" | "spaceDelimited" | "pipeDelimited" | "deepObject" | undefined;
                examples?: unknown[] | Record<string, {
                    value?: unknown;
                    summary?: string | undefined;
                }> | undefined;
            }[] | undefined;
            requestBody?: any;
            responses?: Record<string, any> | undefined;
            'x-scalar-stability'?: import("@scalar/types").XScalarStability | undefined;
        }) => void;
        delete: (uid: (string & import("zod").BRAND<"operation">) | null | undefined) => void;
        set: (item: {
            uid: string & import("zod").BRAND<"operation">;
            path: string;
            type: "request";
            selectedSecuritySchemeUids: ((string & import("zod").BRAND<"securityScheme">) | (string & import("zod").BRAND<"securityScheme">)[])[];
            selectedServerUid: (string & import("zod").BRAND<"server">) | null;
            servers: (string & import("zod").BRAND<"server">)[];
            examples: (string & import("zod").BRAND<"example">)[];
            method: "options" | "connect" | "delete" | "get" | "head" | "patch" | "post" | "put" | "trace";
            description?: string | undefined;
            summary?: string | undefined;
            externalDocs?: {
                url: string;
                description?: string | undefined;
            } | undefined;
            'x-internal'?: boolean | undefined;
            'x-scalar-ignore'?: boolean | undefined;
            security?: Record<string, string[]>[] | undefined;
            tags?: string[] | undefined;
            deprecated?: boolean | undefined;
            operationId?: string | undefined;
            parameters?: {
                name: string;
                required: boolean;
                in: "cookie" | "path" | "query" | "header";
                deprecated: boolean;
                description?: string | undefined;
                example?: unknown;
                schema?: unknown;
                content?: unknown;
                style?: "matrix" | "simple" | "form" | "label" | "spaceDelimited" | "pipeDelimited" | "deepObject" | undefined;
                examples?: unknown[] | Record<string, {
                    value?: unknown;
                    summary?: string | undefined;
                }> | undefined;
            }[] | undefined;
            requestBody?: any;
            responses?: Record<string, any> | undefined;
            'x-scalar-stability'?: import("@scalar/types").XScalarStability | undefined;
        }) => void;
        edit: <P extends "tags" | "summary" | "description" | "operationId" | "security" | "requestBody" | "parameters" | "externalDocs" | "deprecated" | "responses" | "x-internal" | "x-scalar-ignore" | "x-scalar-stability" | "path" | "method" | "type" | "uid" | "selectedSecuritySchemeUids" | "servers" | "selectedServerUid" | `tags.${number}` | `security.${number}` | `security.${number}.${string}` | "externalDocs.description" | "externalDocs.url" | `selectedSecuritySchemeUids.${number}` | `selectedSecuritySchemeUids.${number}.${number}` | `servers.${number}` | "examples" | `requestBody.${string}` | `examples.${number}` | `parameters.${number}` | `parameters.${number}.description` | `parameters.${number}.deprecated` | `parameters.${number}.example` | `parameters.${number}.name` | `parameters.${number}.in` | `parameters.${number}.style` | `parameters.${number}.examples` | `parameters.${number}.content` | `parameters.${number}.required` | `parameters.${number}.schema` | `parameters.${number}.examples.${number}` | `parameters.${number}.examples.${string}` | `responses.${string}`>(uid: (string & import("zod").BRAND<"operation">) | null | undefined, path: P, value: P extends "tags" | "summary" | "description" | "operationId" | "security" | "requestBody" | "parameters" | "externalDocs" | "deprecated" | "responses" | "x-internal" | "x-scalar-ignore" | "x-scalar-stability" | "path" | "method" | "type" | "uid" | "selectedSecuritySchemeUids" | "servers" | "selectedServerUid" | "examples" ? {
            uid: string & import("zod").BRAND<"operation">;
            path: string;
            type: "request";
            selectedSecuritySchemeUids: ((string & import("zod").BRAND<"securityScheme">) | (string & import("zod").BRAND<"securityScheme">)[])[];
            selectedServerUid: (string & import("zod").BRAND<"server">) | null;
            servers: (string & import("zod").BRAND<"server">)[];
            examples: (string & import("zod").BRAND<"example">)[];
            method: "options" | "connect" | "delete" | "get" | "head" | "patch" | "post" | "put" | "trace";
            description?: string | undefined;
            summary?: string | undefined;
            externalDocs?: {
                url: string;
                description?: string | undefined;
            } | undefined;
            'x-internal'?: boolean | undefined;
            'x-scalar-ignore'?: boolean | undefined;
            security?: Record<string, string[]>[] | undefined;
            tags?: string[] | undefined;
            deprecated?: boolean | undefined;
            operationId?: string | undefined;
            parameters?: {
                name: string;
                required: boolean;
                in: "cookie" | "path" | "query" | "header";
                deprecated: boolean;
                description?: string | undefined;
                example?: unknown;
                schema?: unknown;
                content?: unknown;
                style?: "matrix" | "simple" | "form" | "label" | "spaceDelimited" | "pipeDelimited" | "deepObject" | undefined;
                examples?: unknown[] | Record<string, {
                    value?: unknown;
                    summary?: string | undefined;
                }> | undefined;
            }[] | undefined;
            requestBody?: any;
            responses?: Record<string, any> | undefined;
            'x-scalar-stability'?: import("@scalar/types").XScalarStability | undefined;
        }[P] : P extends `${infer K}.${infer R}` ? K extends "tags" | "summary" | "description" | "operationId" | "security" | "requestBody" | "parameters" | "externalDocs" | "deprecated" | "responses" | "x-internal" | "x-scalar-ignore" | "x-scalar-stability" | "path" | "method" | "type" | "uid" | "selectedSecuritySchemeUids" | "servers" | "selectedServerUid" | "examples" ? R extends import("@scalar/object-utils/nested").Path<{
            uid: string & import("zod").BRAND<"operation">;
            path: string;
            type: "request";
            selectedSecuritySchemeUids: ((string & import("zod").BRAND<"securityScheme">) | (string & import("zod").BRAND<"securityScheme">)[])[];
            selectedServerUid: (string & import("zod").BRAND<"server">) | null;
            servers: (string & import("zod").BRAND<"server">)[];
            examples: (string & import("zod").BRAND<"example">)[];
            method: "options" | "connect" | "delete" | "get" | "head" | "patch" | "post" | "put" | "trace";
            description?: string | undefined;
            summary?: string | undefined;
            externalDocs?: {
                url: string;
                description?: string | undefined;
            } | undefined;
            'x-internal'?: boolean | undefined;
            'x-scalar-ignore'?: boolean | undefined;
            security?: Record<string, string[]>[] | undefined;
            tags?: string[] | undefined;
            deprecated?: boolean | undefined;
            operationId?: string | undefined;
            parameters?: {
                name: string;
                required: boolean;
                in: "cookie" | "path" | "query" | "header";
                deprecated: boolean;
                description?: string | undefined;
                example?: unknown;
                schema?: unknown;
                content?: unknown;
                style?: "matrix" | "simple" | "form" | "label" | "spaceDelimited" | "pipeDelimited" | "deepObject" | undefined;
                examples?: unknown[] | Record<string, {
                    value?: unknown;
                    summary?: string | undefined;
                }> | undefined;
            }[] | undefined;
            requestBody?: any;
            responses?: Record<string, any> | undefined;
            'x-scalar-stability'?: import("@scalar/types").XScalarStability | undefined;
        }[K]> ? import("@scalar/object-utils/nested").PathValue<{
            uid: string & import("zod").BRAND<"operation">;
            path: string;
            type: "request";
            selectedSecuritySchemeUids: ((string & import("zod").BRAND<"securityScheme">) | (string & import("zod").BRAND<"securityScheme">)[])[];
            selectedServerUid: (string & import("zod").BRAND<"server">) | null;
            servers: (string & import("zod").BRAND<"server">)[];
            examples: (string & import("zod").BRAND<"example">)[];
            method: "options" | "connect" | "delete" | "get" | "head" | "patch" | "post" | "put" | "trace";
            description?: string | undefined;
            summary?: string | undefined;
            externalDocs?: {
                url: string;
                description?: string | undefined;
            } | undefined;
            'x-internal'?: boolean | undefined;
            'x-scalar-ignore'?: boolean | undefined;
            security?: Record<string, string[]>[] | undefined;
            tags?: string[] | undefined;
            deprecated?: boolean | undefined;
            operationId?: string | undefined;
            parameters?: {
                name: string;
                required: boolean;
                in: "cookie" | "path" | "query" | "header";
                deprecated: boolean;
                description?: string | undefined;
                example?: unknown;
                schema?: unknown;
                content?: unknown;
                style?: "matrix" | "simple" | "form" | "label" | "spaceDelimited" | "pipeDelimited" | "deepObject" | undefined;
                examples?: unknown[] | Record<string, {
                    value?: unknown;
                    summary?: string | undefined;
                }> | undefined;
            }[] | undefined;
            requestBody?: any;
            responses?: Record<string, any> | undefined;
            'x-scalar-stability'?: import("@scalar/types").XScalarStability | undefined;
        }[K], R> : never : K extends `${number}` ? never : never : P extends `${number}` ? never : never) => void;
        untrackedEdit: <P extends "tags" | "summary" | "description" | "operationId" | "security" | "requestBody" | "parameters" | "externalDocs" | "deprecated" | "responses" | "x-internal" | "x-scalar-ignore" | "x-scalar-stability" | "path" | "method" | "type" | "uid" | "selectedSecuritySchemeUids" | "servers" | "selectedServerUid" | `tags.${number}` | `security.${number}` | `security.${number}.${string}` | "externalDocs.description" | "externalDocs.url" | `selectedSecuritySchemeUids.${number}` | `selectedSecuritySchemeUids.${number}.${number}` | `servers.${number}` | "examples" | `requestBody.${string}` | `examples.${number}` | `parameters.${number}` | `parameters.${number}.description` | `parameters.${number}.deprecated` | `parameters.${number}.example` | `parameters.${number}.name` | `parameters.${number}.in` | `parameters.${number}.style` | `parameters.${number}.examples` | `parameters.${number}.content` | `parameters.${number}.required` | `parameters.${number}.schema` | `parameters.${number}.examples.${number}` | `parameters.${number}.examples.${string}` | `responses.${string}`>(uid: string & import("zod").BRAND<"operation">, path: P, value: P extends "tags" | "summary" | "description" | "operationId" | "security" | "requestBody" | "parameters" | "externalDocs" | "deprecated" | "responses" | "x-internal" | "x-scalar-ignore" | "x-scalar-stability" | "path" | "method" | "type" | "uid" | "selectedSecuritySchemeUids" | "servers" | "selectedServerUid" | "examples" ? {
            uid: string & import("zod").BRAND<"operation">;
            path: string;
            type: "request";
            selectedSecuritySchemeUids: ((string & import("zod").BRAND<"securityScheme">) | (string & import("zod").BRAND<"securityScheme">)[])[];
            selectedServerUid: (string & import("zod").BRAND<"server">) | null;
            servers: (string & import("zod").BRAND<"server">)[];
            examples: (string & import("zod").BRAND<"example">)[];
            method: "options" | "connect" | "delete" | "get" | "head" | "patch" | "post" | "put" | "trace";
            description?: string | undefined;
            summary?: string | undefined;
            externalDocs?: {
                url: string;
                description?: string | undefined;
            } | undefined;
            'x-internal'?: boolean | undefined;
            'x-scalar-ignore'?: boolean | undefined;
            security?: Record<string, string[]>[] | undefined;
            tags?: string[] | undefined;
            deprecated?: boolean | undefined;
            operationId?: string | undefined;
            parameters?: {
                name: string;
                required: boolean;
                in: "cookie" | "path" | "query" | "header";
                deprecated: boolean;
                description?: string | undefined;
                example?: unknown;
                schema?: unknown;
                content?: unknown;
                style?: "matrix" | "simple" | "form" | "label" | "spaceDelimited" | "pipeDelimited" | "deepObject" | undefined;
                examples?: unknown[] | Record<string, {
                    value?: unknown;
                    summary?: string | undefined;
                }> | undefined;
            }[] | undefined;
            requestBody?: any;
            responses?: Record<string, any> | undefined;
            'x-scalar-stability'?: import("@scalar/types").XScalarStability | undefined;
        }[P] : P extends `${infer K}.${infer R}` ? K extends "tags" | "summary" | "description" | "operationId" | "security" | "requestBody" | "parameters" | "externalDocs" | "deprecated" | "responses" | "x-internal" | "x-scalar-ignore" | "x-scalar-stability" | "path" | "method" | "type" | "uid" | "selectedSecuritySchemeUids" | "servers" | "selectedServerUid" | "examples" ? R extends import("@scalar/object-utils/nested").Path<{
            uid: string & import("zod").BRAND<"operation">;
            path: string;
            type: "request";
            selectedSecuritySchemeUids: ((string & import("zod").BRAND<"securityScheme">) | (string & import("zod").BRAND<"securityScheme">)[])[];
            selectedServerUid: (string & import("zod").BRAND<"server">) | null;
            servers: (string & import("zod").BRAND<"server">)[];
            examples: (string & import("zod").BRAND<"example">)[];
            method: "options" | "connect" | "delete" | "get" | "head" | "patch" | "post" | "put" | "trace";
            description?: string | undefined;
            summary?: string | undefined;
            externalDocs?: {
                url: string;
                description?: string | undefined;
            } | undefined;
            'x-internal'?: boolean | undefined;
            'x-scalar-ignore'?: boolean | undefined;
            security?: Record<string, string[]>[] | undefined;
            tags?: string[] | undefined;
            deprecated?: boolean | undefined;
            operationId?: string | undefined;
            parameters?: {
                name: string;
                required: boolean;
                in: "cookie" | "path" | "query" | "header";
                deprecated: boolean;
                description?: string | undefined;
                example?: unknown;
                schema?: unknown;
                content?: unknown;
                style?: "matrix" | "simple" | "form" | "label" | "spaceDelimited" | "pipeDelimited" | "deepObject" | undefined;
                examples?: unknown[] | Record<string, {
                    value?: unknown;
                    summary?: string | undefined;
                }> | undefined;
            }[] | undefined;
            requestBody?: any;
            responses?: Record<string, any> | undefined;
            'x-scalar-stability'?: import("@scalar/types").XScalarStability | undefined;
        }[K]> ? import("@scalar/object-utils/nested").PathValue<{
            uid: string & import("zod").BRAND<"operation">;
            path: string;
            type: "request";
            selectedSecuritySchemeUids: ((string & import("zod").BRAND<"securityScheme">) | (string & import("zod").BRAND<"securityScheme">)[])[];
            selectedServerUid: (string & import("zod").BRAND<"server">) | null;
            servers: (string & import("zod").BRAND<"server">)[];
            examples: (string & import("zod").BRAND<"example">)[];
            method: "options" | "connect" | "delete" | "get" | "head" | "patch" | "post" | "put" | "trace";
            description?: string | undefined;
            summary?: string | undefined;
            externalDocs?: {
                url: string;
                description?: string | undefined;
            } | undefined;
            'x-internal'?: boolean | undefined;
            'x-scalar-ignore'?: boolean | undefined;
            security?: Record<string, string[]>[] | undefined;
            tags?: string[] | undefined;
            deprecated?: boolean | undefined;
            operationId?: string | undefined;
            parameters?: {
                name: string;
                required: boolean;
                in: "cookie" | "path" | "query" | "header";
                deprecated: boolean;
                description?: string | undefined;
                example?: unknown;
                schema?: unknown;
                content?: unknown;
                style?: "matrix" | "simple" | "form" | "label" | "spaceDelimited" | "pipeDelimited" | "deepObject" | undefined;
                examples?: unknown[] | Record<string, {
                    value?: unknown;
                    summary?: string | undefined;
                }> | undefined;
            }[] | undefined;
            requestBody?: any;
            responses?: Record<string, any> | undefined;
            'x-scalar-stability'?: import("@scalar/types").XScalarStability | undefined;
        }[K], R> : never : K extends `${number}` ? never : never : P extends `${number}` ? never : never) => void;
        undo: (uid: string & import("zod").BRAND<"operation">) => void;
        redo: (uid: string & import("zod").BRAND<"operation">) => void;
        reset: () => void;
    };
};
type AddTag = ReturnType<typeof extendedTagDataFactory>['addTag'];
/**
 * Create the extended mutators for request where access to the workspace is required
 */
export declare function extendedRequestDataFactory({ requestExamples, requestExampleMutators, requestMutators, collectionMutators, collections, tags, tagMutators, }: StoreContext, addTag: AddTag): {
    addRequest: (payload: RequestPayload, collectionUid: Collection["uid"]) => void | {
        uid: string & import("zod").BRAND<"operation">;
        path: string;
        type: "request";
        selectedSecuritySchemeUids: ((string & import("zod").BRAND<"securityScheme">) | (string & import("zod").BRAND<"securityScheme">)[])[];
        selectedServerUid: (string & import("zod").BRAND<"server">) | null;
        servers: (string & import("zod").BRAND<"server">)[];
        examples: (string & import("zod").BRAND<"example">)[];
        method: "options" | "connect" | "delete" | "get" | "head" | "patch" | "post" | "put" | "trace";
        description?: string | undefined;
        summary?: string | undefined;
        externalDocs?: {
            url: string;
            description?: string | undefined;
        } | undefined;
        'x-internal'?: boolean | undefined;
        'x-scalar-ignore'?: boolean | undefined;
        security?: Record<string, string[]>[] | undefined;
        tags?: string[] | undefined;
        deprecated?: boolean | undefined;
        operationId?: string | undefined;
        parameters?: {
            name: string;
            required: boolean;
            in: "cookie" | "path" | "query" | "header";
            deprecated: boolean;
            description?: string | undefined;
            example?: unknown;
            schema?: unknown;
            content?: unknown;
            style?: "matrix" | "simple" | "form" | "label" | "spaceDelimited" | "pipeDelimited" | "deepObject" | undefined;
            examples?: unknown[] | Record<string, {
                value?: unknown;
                summary?: string | undefined;
            }> | undefined;
        }[] | undefined;
        requestBody?: any;
        responses?: Record<string, any> | undefined;
        'x-scalar-stability'?: import("@scalar/types").XScalarStability | undefined;
    };
    deleteRequest: (request: Request, collectionUid: Collection["uid"]) => void;
    findRequestParents: (r: Request) => string[];
};
/** Factory function to allow testing of the function */
export declare function findRequestParentsFactory({ collections, tags, }: {
    collections: Record<string, Collection>;
    tags: Record<string, Tag>;
}): (r: Request) => string[];
/** First draft request" */
export declare function createInitialRequest(): {
    request: {
        uid: string & import("zod").BRAND<"operation">;
        path: string;
        type: "request";
        selectedSecuritySchemeUids: ((string & import("zod").BRAND<"securityScheme">) | (string & import("zod").BRAND<"securityScheme">)[])[];
        selectedServerUid: (string & import("zod").BRAND<"server">) | null;
        servers: (string & import("zod").BRAND<"server">)[];
        examples: (string & import("zod").BRAND<"example">)[];
        method: "options" | "connect" | "delete" | "get" | "head" | "patch" | "post" | "put" | "trace";
        description?: string | undefined;
        summary?: string | undefined;
        externalDocs?: {
            url: string;
            description?: string | undefined;
        } | undefined;
        'x-internal'?: boolean | undefined;
        'x-scalar-ignore'?: boolean | undefined;
        security?: Record<string, string[]>[] | undefined;
        tags?: string[] | undefined;
        deprecated?: boolean | undefined;
        operationId?: string | undefined;
        parameters?: {
            name: string;
            required: boolean;
            in: "cookie" | "path" | "query" | "header";
            deprecated: boolean;
            description?: string | undefined;
            example?: unknown;
            schema?: unknown;
            content?: unknown;
            style?: "matrix" | "simple" | "form" | "label" | "spaceDelimited" | "pipeDelimited" | "deepObject" | undefined;
            examples?: unknown[] | Record<string, {
                value?: unknown;
                summary?: string | undefined;
            }> | undefined;
        }[] | undefined;
        requestBody?: any;
        responses?: Record<string, any> | undefined;
        'x-scalar-stability'?: import("@scalar/types").XScalarStability | undefined;
    };
};
export {};
//# sourceMappingURL=requests.d.ts.map