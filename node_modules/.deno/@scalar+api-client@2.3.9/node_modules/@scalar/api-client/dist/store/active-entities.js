import { flattenEnvVars as O } from "../libs/string-template.js";
import { environmentSchema as I } from "@scalar/oas-utils/entities/environment";
import { isDefined as J } from "@scalar/oas-utils/helpers";
import { computed as i, inject as M } from "vue";
import { getRouterParams as P } from "./router-params.js";
import { PathId as m } from "../routes.js";
const z = ({
  collections: l,
  requestExamples: D,
  requests: E,
  router: N,
  servers: p,
  workspaces: b
}) => {
  const s = i(P(N)), r = i(
    () => b[s.value[m.Workspace]] ?? Object.values(b)[0]
  ), d = i(
    () => {
      var e;
      return ((e = r.value) == null ? void 0 : e.collections.map((t) => l[t]).filter(J).sort((t, n) => {
        var v, o;
        return ((v = t.info) == null ? void 0 : v.title) === "Drafts" ? 1 : ((o = n.info) == null ? void 0 : o.title) === "Drafts" ? -1 : 0;
      })) ?? [];
    }
  ), h = i(
    () => {
      var e;
      return (e = d.value) == null ? void 0 : e.flatMap((t) => t.servers.map((n) => p[n]));
    }
  ), U = i(
    () => {
      var e;
      return ((e = d.value) == null ? void 0 : e.flatMap((t) => t.requests)) ?? [];
    }
  ), S = i(() => {
    var t, n, v, o, u, a, c, y, g;
    if (!((t = r.value) != null && t.activeEnvironmentId))
      return I.parse({
        uid: "default",
        color: "#0082D0",
        name: "No Environment",
        value: JSON.stringify((n = r.value) == null ? void 0 : n.environments, null, 2)
      });
    const e = d.value.find(
      (j) => {
        var x, C;
        return (C = j["x-scalar-environments"]) == null ? void 0 : C[((x = r.value) == null ? void 0 : x.activeEnvironmentId) ?? ""];
      }
    );
    return e && ((v = r.value) != null && v.activeEnvironmentId) ? I.parse({
      uid: r.value.activeEnvironmentId,
      name: r.value.activeEnvironmentId,
      value: JSON.stringify(
        (a = (u = e["x-scalar-environments"]) == null ? void 0 : u[(o = r.value) == null ? void 0 : o.activeEnvironmentId]) == null ? void 0 : a.variables,
        null,
        2
      ),
      color: ((g = (y = e["x-scalar-environments"]) == null ? void 0 : y[(c = r.value) == null ? void 0 : c.activeEnvironmentId]) == null ? void 0 : g.color) || "#0082D0",
      isDefault: !1
    }) : I.parse({
      uid: "default",
      color: "#0082D0",
      name: "No Environment",
      value: JSON.stringify(r.value.environments, null, 2)
    });
  }), f = i(() => {
    var n;
    const e = s.value[m.Request], t = l[s.value.collection] || l[((n = r.value) == null ? void 0 : n.collections[0]) ?? ""];
    return E[e] || E[(t == null ? void 0 : t.requests[0]) ?? ""] || Object.values(E)[0];
  }), q = i(() => {
    var t;
    const e = s.value[m.Examples] === "default" ? ((t = f.value) == null ? void 0 : t.examples[0]) || "" : s.value[m.Examples];
    return D[e];
  }), k = i(() => {
    var v, o, u;
    const e = l[s.value[m.Collection]];
    if (e)
      return e;
    const t = (v = f.value) == null ? void 0 : v.uid;
    if (t)
      return Object.values(l).find((a) => {
        var c;
        return (c = a.requests) == null ? void 0 : c.includes(t);
      });
    const n = ((o = r.value) == null ? void 0 : o.collections[0]) ?? ((u = l[0]) == null ? void 0 : u.uid) ?? "";
    return l[n];
  }), A = i(() => {
    var e, t;
    if ((e = f.value) != null && e.selectedServerUid) {
      const n = p[f.value.selectedServerUid];
      if (n)
        return n;
    }
    if ((t = k.value) != null && t.selectedServerUid) {
      const n = p[k.value.selectedServerUid];
      if (n)
        return n;
    }
  }), R = i(
    () => {
      var e;
      return s.value[m.Cookies] === "default" ? ((e = r.value) == null ? void 0 : e.cookies[0]) ?? "default" : s.value[m.Cookies];
    }
  ), W = i(() => {
    var u;
    const e = ((u = r.value) == null ? void 0 : u.environments) ?? {}, t = S.value.uid ? JSON.parse(S.value.value) : {}, n = O(e).map(([a, c]) => ({
      key: a,
      value: c,
      source: "global"
    })), v = O(t).map(([a, c]) => ({
      key: a,
      value: c,
      source: "collection"
    })), o = /* @__PURE__ */ new Map();
    return v.forEach((a) => {
      o.set(a.key, a);
    }), n.forEach((a) => {
      o.has(a.key) || o.set(a.key, a);
    }), Array.from(o.values());
  });
  return {
    activeCollection: k,
    activeCookieId: R,
    activeExample: q,
    activeRequest: f,
    activeRouterParams: s,
    activeEnvironment: S,
    activeServer: A,
    activeWorkspace: r,
    activeWorkspaceCollections: d,
    activeWorkspaceServers: h,
    activeEnvVariables: W,
    activeWorkspaceRequests: U
  };
}, T = Symbol(), F = () => {
  const l = M(T);
  if (!l)
    throw new Error("Active entities store not provided");
  return l;
};
export {
  T as ACTIVE_ENTITIES_SYMBOL,
  z as createActiveEntitiesStore,
  F as useActiveEntities
};
