import { LAYOUT_SYMBOL as K } from "../hooks/useLayout.js";
import { createSidebarState as D, SIDEBAR_SYMBOL as N } from "../hooks/useSidebar.js";
import { getRequestUidByPathMethod as V } from "./get-request-uid-by-path-method.js";
import { loadAllResources as z } from "./local-storage.js";
import { createActiveEntitiesStore as H, ACTIVE_ENTITIES_SYMBOL as J } from "../store/active-entities.js";
import { createWorkspaceStore as G, WORKSPACE_SYMBOL as Q } from "../store/store.js";
import { workspaceSchema as X } from "@scalar/oas-utils/entities/workspace";
import { LS_KEYS as Z, prettyPrintJson as $ } from "@scalar/oas-utils/helpers";
import { DATA_VERSION_LS_LEY as ee, DATA_VERSION as te } from "@scalar/oas-utils/migrations";
import { apiClientConfigurationSchema as x } from "@scalar/types/api-reference";
import { createApp as re, watch as oe } from "vue";
const Se = ({
  el: C,
  appComponent: O,
  configuration: U = {},
  isReadOnly: p = !1,
  store: k,
  persistData: q = !0,
  mountOnInitialize: E = !0,
  layout: m = "desktop",
  router: l
}) => {
  const s = x.parse(U), a = k || G({
    proxyUrl: s.proxyUrl,
    theme: s.theme,
    showSidebar: s.showSidebar ?? !0,
    hideClientButton: s.hideClientButton ?? !1,
    _integration: s._integration,
    useLocalStorage: q
  }), f = H({ ...a, router: l }), L = D({ layout: m }), S = () => {
    try {
      return typeof window < "u" && window.localStorage !== void 0;
    } catch {
      return !1;
    }
  };
  if (S() && localStorage.getItem(Z.WORKSPACE) && !p)
    try {
      const t = {};
      let e = 0, r = 0, o = "";
      for (o in localStorage)
        Object.prototype.hasOwnProperty.call(localStorage, o) && (r = (localStorage[o].length + o.length) * 2, e += r, t[o] = (r / 1024).toFixed(2) + " KB");
      t.Total = (e / 1024).toFixed(2) + " KB", console.table(t), z(a);
    } catch (t) {
      console.warn("Failed to load from localStorage:", t);
    }
  else if (!p || !s.url && !s.content) {
    if (a.workspaceMutators.add({
      uid: "default",
      name: "Workspace",
      proxyUrl: s.proxyUrl
    }), S())
      try {
        localStorage.setItem(ee, te);
      } catch (t) {
        console.warn("Failed to set localStorage version:", t);
      }
  } else {
    const t = X.parse({
      uid: "default",
      name: "Workspace",
      proxyUrl: s.proxyUrl
    });
    a.workspaceMutators.rawAdd(t);
  }
  const c = re(O);
  c.use(l), c.provide(Q, a), c.provide(K, m), c.provide(J, f), c.provide(N, L);
  const {
    collectionMutators: B,
    importSpecFile: I,
    importSpecFromUrl: R,
    modalState: h,
    requests: v,
    securitySchemes: T,
    securitySchemeMutators: P,
    servers: g,
    workspaceMutators: Y,
    requestExampleMutators: j
  } = a, { activeCollection: u, activeWorkspace: d } = f, w = (t = C) => {
    if (!t) {
      console.error(
        "[@scalar/api-client-modal] Could not create the API client.",
        "Invalid HTML element provided.",
        "Read more: https://github.com/scalar/scalar/tree/main/packages/api-client"
      );
      return;
    }
    c.mount(t);
  };
  E && w();
  const y = (t) => {
    const e = V(v, t);
    e ? l.push({
      name: "request",
      query: t != null && t._source ? { source: t._source } : {},
      params: {
        workspace: "default",
        request: e
      }
    }) : console.warn("[@scalar/api-client] Could not find request for path and method", t);
  };
  return {
    /** The vue app instance for the modal, be careful with this */
    app: c,
    /**
     * Update the API client config
     *
     * Deletes the current store before importing again for now, in the future will Diff and only update what is needed
     */
    updateConfig: async (t) => {
      var r, o, i;
      const e = x.parse(t);
      (e.url || e.content || e.servers || e.authentication || e.slug || e.title || e.baseServerURL || e.proxyUrl || e.showSidebar) && (a.collectionMutators.reset(), a.requestMutators.reset(), a.requestExampleMutators.reset(), a.securitySchemeMutators.reset(), a.serverMutators.reset(), a.tagMutators.reset(), Y.edit((r = d.value) == null ? void 0 : r.uid, "collections", []), e.url ? await R(e.url, ((o = d.value) == null ? void 0 : o.uid) ?? "default", {
        ...e,
        setCollectionSecurity: !0
      }) : e.content ? await I(e.content, ((i = d.value) == null ? void 0 : i.uid) ?? "default", {
        ...e,
        setCollectionSecurity: !0
      }) : console.error(
        "[@scalar/api-client-modal] Could not create the API client.",
        'Please provide an OpenAPI document: { url: "â€¦" }',
        "Read more: https://github.com/scalar/scalar/tree/main/packages/api-client"
      ));
    },
    /** Update the currently selected server via URL */
    updateServer: (t) => {
      var r;
      const e = Object.values(g).find((o) => o.url === t);
      e && u.value && B.edit((r = u.value) == null ? void 0 : r.uid, "selectedServerUid", e.uid);
    },
    /** Update the currently selected server via URL */
    onUpdateServer: (t) => {
      oe(
        () => {
          var e;
          return (e = u.value) == null ? void 0 : e.selectedServerUid;
        },
        (e) => {
          const r = Object.values(g).find((o) => o.uid === e);
          r != null && r.url && t(r.url);
        }
      );
    },
    /**
     * Update the auth values, we currently don't change the auth selection
     */
    updateAuth: ({
      nameKey: t,
      propertyKey: e,
      value: r
    }) => {
      const i = Object.values(T).find((n) => n.nameKey === t);
      i && P.edit(i.uid, e, r);
    },
    /** Route to a method + path */
    route: y,
    /** Open the API client modal and optionally route to a request */
    open: (t) => {
      const { method: e, path: r, requestUid: o } = t ?? {};
      (e && r || o) && y(t), h.open = !0;
    },
    /** Mount the references to a given element */
    mount: w,
    /** State for controlling the modal */
    modalState: h,
    /* The workspace store */
    store: a,
    /** Update the currently selected example */
    updateExample: (t, e) => {
      var n, A, M, _, b;
      if (!t || !e)
        return;
      const r = Object.values(v).find(
        ({ operationId: F, path: W }) => F === e || W === e
      );
      if (!r)
        return;
      const o = Object.keys(((n = r.requestBody) == null ? void 0 : n.content) || {})[0] || "", i = (b = (_ = (M = (A = r.requestBody) == null ? void 0 : A.content) == null ? void 0 : M[o]) == null ? void 0 : _.examples) == null ? void 0 : b[t];
      i && j.edit(r.examples[0], "body.raw.value", $(i.value));
    }
  };
};
export {
  Se as createApiClient
};
