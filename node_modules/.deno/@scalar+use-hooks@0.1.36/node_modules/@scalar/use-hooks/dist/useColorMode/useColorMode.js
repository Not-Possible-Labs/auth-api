import { ref as y, computed as a, watch as M, onMounted as h, onUnmounted as g } from "vue";
import { z as p } from "zod";
const o = y("dark"), v = p.enum(["dark", "light", "system"]).optional().catch(void 0);
function L(c = {}) {
  var s;
  const { initialColorMode: l = "system", overrideColorMode: u } = c;
  function m() {
    var e;
    o.value = r.value === "dark" ? "light" : "dark", !(typeof window > "u") && ((e = window == null ? void 0 : window.localStorage) == null || e.setItem("colorMode", o.value));
  }
  function d(e) {
    var t;
    o.value = e, !(typeof window > "u") && ((t = window == null ? void 0 : window.localStorage) == null || t.setItem("colorMode", o.value));
  }
  function n() {
    var e;
    return typeof window > "u" ? "light" : typeof (window == null ? void 0 : window.matchMedia) != "function" || (e = window == null ? void 0 : window.matchMedia("(prefers-color-scheme: dark)")) != null && e.matches ? "dark" : "light";
  }
  const r = a({
    get: () => o.value === "system" ? n() : o.value,
    set: d
  }), f = a({
    get: () => r.value === "dark",
    set: (e) => d(e ? "dark" : "light")
  });
  function i(e) {
    if (typeof document > "u" || typeof window > "u")
      return;
    (u ?? (e === "system" ? n() : e)) === "dark" ? (document.body.classList.add("dark-mode"), document.body.classList.remove("light-mode")) : (document.body.classList.add("light-mode"), document.body.classList.remove("dark-mode"));
  }
  const w = v.parse(
    typeof window < "u" ? (s = window == null ? void 0 : window.localStorage) == null ? void 0 : s.getItem("colorMode") : "system"
  );
  return o.value = w ?? l, M(o, i, { immediate: !0 }), h(() => {
    if (typeof window < "u" && typeof (window == null ? void 0 : window.matchMedia) == "function") {
      const e = window.matchMedia("(prefers-color-scheme: dark)"), t = () => o.value === "system" && i("system");
      e.addEventListener("change", t), g(() => {
        e.removeEventListener("change", t);
      });
    }
  }), {
    /** The current color mode (writable). */
    colorMode: a({
      get: () => o.value,
      set: d
    }),
    /** The computed dark/light mode (writable). */
    darkLightMode: r,
    /** Whether the current color mode is dark (writable). */
    isDarkMode: f,
    /** Toggles the color mode between light and dark. */
    toggleColorMode: m,
    /** Sets the color mode to the specified value. */
    setColorMode: d,
    /** Gets the system mode preference. */
    getSystemModePreference: n
  };
}
export {
  L as useColorMode
};
