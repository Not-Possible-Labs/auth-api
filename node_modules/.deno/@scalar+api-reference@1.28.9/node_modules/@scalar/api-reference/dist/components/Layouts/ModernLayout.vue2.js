import { defineComponent as v, useSlots as C, watch as c, openBlock as t, createBlock as u, normalizeClass as B, createSlots as w, withCtx as n, unref as l, isRef as D, createCommentVNode as d, createElementBlock as p, renderSlot as f, createVNode as m, renderList as M, normalizeProps as $, guardReactiveProps as V } from "vue";
import { OpenApiClientButton as H } from "@scalar/api-client/components";
import { ScalarSidebarFooter as K, ScalarColorModeToggleButton as L } from "@scalar/components";
import { useBreakpoints as N } from "@scalar/use-hooks/useBreakpoints";
import R from "../ApiReferenceLayout.vue.js";
import U from "../MobileHeader.vue.js";
import z from "../../features/Search/SearchButton.vue.js";
import { useSidebar as A } from "../../hooks/useSidebar.js";
import { useNavState as O } from "../../hooks/useNavState.js";
const P = { key: 0 }, T = {
  key: 1,
  class: "scalar-api-references-standalone-search"
}, E = { key: 1 }, Y = /* @__PURE__ */ v({
  __name: "ModernLayout",
  props: {
    configuration: {},
    parsedSpec: {},
    rawSpec: {},
    isDark: { type: Boolean }
  },
  emits: ["toggleDarkMode", "updateContent"],
  setup(g) {
    const a = g, S = C(), { mediaQueries: k } = N(), { isSidebarOpen: i } = A(), h = !1;
    c(k.lg, (e, o) => {
      o && !e && (i.value = !1);
    });
    const { hash: y } = O();
    return c(y, (e, o) => {
      e && e !== o && (i.value = !1);
    }), (e, o) => (t(), u(R, {
      class: B({
        "scalar-api-references-standalone-mobile": e.configuration.showSidebar
      }),
      configuration: e.configuration,
      parsedSpec: e.parsedSpec,
      rawSpec: e.rawSpec,
      onUpdateContent: o[2] || (o[2] = (r) => e.$emit("updateContent", r))
    }, w({
      header: n(() => [
        a.configuration.showSidebar ? (t(), u(U, {
          key: 0,
          open: l(i),
          "onUpdate:open": o[0] || (o[0] = (r) => D(i) ? i.value = r : null)
        }, null, 8, ["open"])) : d("", !0)
      ]),
      "sidebar-start": n(({ spec: r }) => {
        var s;
        return [
          e.$slots["document-selector"] ? (t(), p("div", P, [
            f(e.$slots, "document-selector", {}, void 0, !0)
          ])) : d("", !0),
          a.configuration.hideSearch ? d("", !0) : (t(), p("div", T, [
            m(l(z), {
              searchHotKey: (s = a.configuration) == null ? void 0 : s.searchHotKey,
              spec: r
            }, null, 8, ["searchHotKey", "spec"])
          ]))
        ];
      }),
      "sidebar-end": n(() => [
        m(l(K), { class: "darklight-reference" }, {
          toggle: n(() => [
            a.configuration.hideDarkModeToggle ? (t(), p("span", E)) : (t(), u(l(L), {
              key: 0,
              modelValue: e.isDark,
              "onUpdate:modelValue": o[1] || (o[1] = (r) => e.$emit("toggleDarkMode"))
            }, null, 8, ["modelValue"]))
          ]),
          default: n(() => [
            a.configuration.hideClientButton ? d("", !0) : (t(), u(l(H), {
              key: 0,
              buttonSource: "sidebar",
              integration: e.configuration._integration,
              isDevelopment: h,
              url: e.configuration.url
            }, null, 8, ["integration", "url"]))
          ]),
          _: 1
        })
      ]),
      _: 2
    }, [
      M(S, (r, s) => ({
        name: s,
        fn: n((b) => [
          f(e.$slots, s, $(V(b || {})), void 0, !0)
        ])
      }))
    ]), 1032, ["class", "configuration", "parsedSpec", "rawSpec"]));
  }
});
export {
  Y as default
};
