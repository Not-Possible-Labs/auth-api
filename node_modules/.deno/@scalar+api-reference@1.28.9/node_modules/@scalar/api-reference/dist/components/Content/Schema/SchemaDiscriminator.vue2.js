import { defineComponent as S, ref as A, openBlock as a, createElementBlock as c, createBlock as n, unref as i, withCtx as l, createVNode as d, createElementVNode as m, toDisplayString as f, Fragment as y, renderList as v, normalizeClass as T, createTextVNode as q } from "vue";
import { TabGroup as B, TabList as N, Tab as V, TabPanel as j } from "@headlessui/vue";
import { cva as w, cx as H } from "@scalar/components";
import { stringify as b } from "flatted";
import g from "./Schema.vue.js";
const L = { class: "property-rule" }, z = { class: "flex items-center gap-1.5 overflow-x-auto" }, G = /* @__PURE__ */ S({
  __name: "SchemaDiscriminator",
  props: {
    discriminator: {},
    schemas: {},
    value: {},
    level: {},
    compact: { type: Boolean },
    hideHeading: { type: Boolean }
  },
  setup(h) {
    const s = h, p = A(0), k = w({
      base: "py-0.75 h-fit rounded-full border px-2 text-sm font-medium transition-colors",
      variants: {
        selected: {
          true: "bg-b-accent text-c-accent hover:text-c-accent",
          false: "bg-transparent text-c-2 hover:text-c-1"
        }
      }
    }), u = (e) => {
      if (!Array.isArray(e) || e.length === 0)
        return {};
      if (e.length > 0 && e[0].allOf) {
        const o = e.flatMap((r) => r.allOf || []);
        return u(o);
      }
      return e.reduce((o, r) => {
        if (!r || typeof r != "object")
          return o;
        const t = { ...o };
        return r.properties && (t.properties = {
          ...t.properties,
          ...r.properties
        }), r.required && Array.isArray(r.required) && (t.required = [
          ...t.required || [],
          ...r.required
        ]), r.type && !t.type && (t.type = r.type), r.description && !t.description && (t.description = r.description), t;
      }, {});
    }, O = (e) => {
      if (!e)
        return null;
      if (s.schemas && typeof s.schemas == "object") {
        for (const [o, r] of Object.entries(s.schemas))
          if (b(r) === b(e))
            return o;
        return Object.keys(e)[0];
      }
      return null;
    }, C = (e) => e.replace(/([A-Z])/g, " $1").replace(/^./, (o) => o.toUpperCase()).toLowerCase().replace(/^(\w)/, (o) => o.toUpperCase());
    return (e, o) => (a(), c("div", L, [
      e.discriminator === "oneOf" || e.discriminator === "anyOf" ? (a(), n(i(B), { key: 0 }, {
        default: l(() => [
          d(i(N), { class: "discriminator-tab-list py-1.25 flex items-center gap-2 rounded-t-lg border border-b-0 px-2 pr-3" }, {
            default: l(() => [
              m("span", null, f(C(e.discriminator)), 1),
              m("div", z, [
                (a(!0), c(y, null, v(e.value[e.discriminator], (r, t) => (a(), n(i(V), {
                  key: t,
                  class: T([
                    "cursor-pointer",
                    i(H)(i(k)({ selected: p.value === t }))
                  ]),
                  onClick: (D) => p.value = t
                }, {
                  default: l(() => [
                    q(f(O(r) || "Schema"), 1)
                  ]),
                  _: 2
                }, 1032, ["class", "onClick"]))), 128))
              ])
            ]),
            _: 1
          }),
          (a(!0), c(y, null, v(e.value[e.discriminator], (r, t) => (a(), n(i(j), {
            key: t,
            class: "discriminator-panel"
          }, {
            default: l(() => [
              d(g, {
                compact: e.compact,
                hideHeading: e.hideHeading,
                noncollapsible: !0,
                schemas: e.schemas,
                value: r
              }, null, 8, ["compact", "hideHeading", "schemas", "value"])
            ]),
            _: 2
          }, 1024))), 128))
        ]),
        _: 1
      })) : (a(), n(g, {
        key: 1,
        compact: e.compact,
        level: e.level,
        noncollapsible: e.level == 0,
        schemas: e.schemas,
        value: u(e.value[e.discriminator])
      }, null, 8, ["compact", "level", "noncollapsible", "schemas", "value"]))
    ]));
  }
});
export {
  G as default
};
