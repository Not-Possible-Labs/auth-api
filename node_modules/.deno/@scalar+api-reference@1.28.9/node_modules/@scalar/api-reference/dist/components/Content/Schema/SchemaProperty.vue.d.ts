import type { OpenAPIV2, OpenAPIV3, OpenAPIV3_1 } from '@scalar/openapi-types';
/**
 * Note: We’re taking in a prop called `value` which should be a JSON Schema.
 *
 * We’re using `optimizeValueForDisplay` to merge null types in discriminators (anyOf, allOf, oneOf, not).
 * So you should basically use the optimizedValue everywhere in the component.
 */
type __VLS_Props = {
    value?: Record<string, any>;
    level?: number;
    name?: string;
    required?: boolean;
    compact?: boolean;
    description?: string;
    additional?: boolean;
    pattern?: boolean;
    withExamples?: boolean;
    schemas?: OpenAPIV2.DefinitionsObject | Record<string, OpenAPIV3.SchemaObject> | Record<string, OpenAPIV3_1.SchemaObject> | unknown;
    hideHeading?: boolean;
};
declare const _default_1: import("vue").DefineComponent<__VLS_Props, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<__VLS_Props> & Readonly<{}>, {
    required: boolean;
    level: number;
    compact: boolean;
    withExamples: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, HTMLLIElement>;
export default _default_1;
//# sourceMappingURL=SchemaProperty.vue.d.ts.map