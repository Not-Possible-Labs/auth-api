import { defineComponent as u, ref as m, useId as f, watch as v, nextTick as h, openBlock as n, createElementBlock as b, createElementVNode as C, unref as t, normalizeClass as k, createVNode as r, withCtx as s, renderSlot as c, createBlock as g, createCommentVNode as S } from "vue";
import { ScalarIcon as _ } from "@scalar/components";
import w from "../Anchor/Anchor.vue.js";
import N from "./Section.vue.js";
import { useNavState as y } from "../../hooks/useNavState.js";
import { scrollToId as B } from "../../helpers/scrollToId.js";
const I = { class: "collapsible-section" }, V = ["id", "aria-controls", "aria-expanded"], R = /* @__PURE__ */ u({
  __name: "CompactSection",
  props: {
    id: {},
    label: {}
  },
  setup(d) {
    const a = d, { hash: p } = y(), e = m(!1), l = f();
    return v(
      p,
      async (o) => {
        o === a.id && !e.value && (e.value = !0, await h(), B(a.id));
      },
      { immediate: !0 }
    ), (o, i) => (n(), b("div", I, [
      C("button", {
        id: o.id,
        "aria-controls": t(l),
        "aria-expanded": e.value,
        class: k(["collapsible-section-trigger", { "collapsible-section-trigger-open": e.value }]),
        type: "button",
        onClick: i[0] || (i[0] = ($) => e.value = !e.value)
      }, [
        r(t(_), {
          icon: e.value ? "ChevronDown" : "ChevronRight",
          size: "md",
          thickness: "1.5"
        }, null, 8, ["icon"]),
        r(w, {
          id: o.id,
          class: "collapsible-section-header"
        }, {
          default: s(() => [
            c(o.$slots, "heading", {}, void 0, !0)
          ]),
          _: 3
        }, 8, ["id"])
      ], 10, V),
      e.value ? (n(), g(N, {
        key: 0,
        id: t(l),
        class: "collapsible-section-content",
        label: o.label
      }, {
        default: s(() => [
          c(o.$slots, "default", {}, void 0, !0)
        ]),
        _: 3
      }, 8, ["id", "label"])) : S("", !0)
    ]));
  }
});
export {
  R as default
};
