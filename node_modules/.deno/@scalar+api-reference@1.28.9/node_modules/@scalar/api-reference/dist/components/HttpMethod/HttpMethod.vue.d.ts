import type { OpenAPI } from '@scalar/openapi-types';
import { type Component } from 'vue';
type __VLS_Props = {
    /** The type of element to render as, defaults to `span` */
    as?: Component | string;
    /** The css style property or variable that will be set to the request method color, defaults to `color` */
    property?: string;
    /** Whether or not to abbreviated the slot content */
    short?: boolean;
    /** The HTTP method to show */
    method: OpenAPI.HttpMethod | string;
};
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: {
        default?(_: {
            normalized: string;
            abbreviated: string;
            color: string;
        }): any;
    };
    refs: {};
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import("vue").DefineComponent<__VLS_Props, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<__VLS_Props> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=HttpMethod.vue.d.ts.map