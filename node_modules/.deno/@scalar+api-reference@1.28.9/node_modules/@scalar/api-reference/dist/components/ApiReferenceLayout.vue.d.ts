import { type ThemeId } from '@scalar/themes';
import type { ReferenceLayoutProps, ReferenceSlotProps } from '../types';
type __VLS_Props = Omit<ReferenceLayoutProps, 'isDark'>;
declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Readonly<{
        footer: (props: ReferenceSlotProps) => any;
        header: (props: ReferenceSlotProps) => any;
        editor: (props: ReferenceSlotProps) => any;
        "content-start": (props: ReferenceSlotProps) => any;
        "content-end": (props: ReferenceSlotProps) => any;
        "sidebar-start": (props: ReferenceSlotProps) => any;
        "sidebar-end": (props: ReferenceSlotProps) => any;
    }> & {
        footer: (props: ReferenceSlotProps) => any;
        header: (props: ReferenceSlotProps) => any;
        editor: (props: ReferenceSlotProps) => any;
        "content-start": (props: ReferenceSlotProps) => any;
        "content-end": (props: ReferenceSlotProps) => any;
        "sidebar-start": (props: ReferenceSlotProps) => any;
        "sidebar-end": (props: ReferenceSlotProps) => any;
    };
    refs: {
        documentEl: HTMLDivElement;
    };
    rootEl: any;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import("vue").DefineComponent<__VLS_Props, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {} & {
    changeTheme: (args_0: {
        id: ThemeId;
        label: string;
    }) => any;
    updateContent: (value: string) => any;
    loadSwaggerFile: () => any;
    linkSwaggerFile: () => any;
    toggleDarkMode: () => any;
}, string, import("vue").PublicProps, Readonly<__VLS_Props> & Readonly<{
    onChangeTheme?: ((args_0: {
        id: ThemeId;
        label: string;
    }) => any) | undefined;
    onUpdateContent?: ((value: string) => any) | undefined;
    onLoadSwaggerFile?: (() => any) | undefined;
    onLinkSwaggerFile?: (() => any) | undefined;
    onToggleDarkMode?: (() => any) | undefined;
}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
//# sourceMappingURL=ApiReferenceLayout.vue.d.ts.map