import N from "fuse.js";
import { ref as h, watch as R, computed as V } from "vue";
import { extractRequestBody as A } from "../../helpers/specHelpers.js";
import { useOperation as B } from "../../hooks/useOperation.js";
import { useSidebar as P } from "../../hooks/useSidebar.js";
import { useNavState as z } from "../../hooks/useNavState.js";
import { getHeadingsFromMarkdown as G } from "../../helpers/getHeadingsFromMarkdown.js";
import { getModels as J } from "../../helpers/getModels.js";
function te({
  specification: a
}) {
  const { hideModels: T } = P(), { getHeadingId: j, getWebhookId: L, getModelId: W, getOperationId: q, getTagId: C } = z(), o = h([]), r = h([]), d = h(0), s = h(""), i = new N(o.value, {
    keys: ["title", "description", "body"]
  }), p = () => {
    d.value = 0, r.value = i.search(s.value);
  };
  R(s, (l) => {
    l.length ? p() : r.value = [];
  });
  function F() {
    s.value = "", d.value = 0, r.value = [];
  }
  const H = V(() => s.value.length === 0 ? o.value.slice(0, 25).map((u) => ({
    item: u
  })) : r.value.slice(0, 25));
  return R(
    a.value,
    async () => {
      var y, g, I, k, M, w, D, $, E;
      if (o.value = [], !((g = (y = a.value) == null ? void 0 : y.tags) != null && g.length) && !((k = (I = a.value) == null ? void 0 : I.webhooks) != null && k.length)) {
        i.setCollection([]);
        return;
      }
      const l = [], u = G(((w = (M = a.value) == null ? void 0 : M.info) == null ? void 0 : w.description) ?? "");
      u.length && (u.forEach((e) => {
        l.push({
          type: "heading",
          title: `Info > ${e.value}`,
          description: "",
          href: `#${j(e)}`,
          tag: e.slug,
          body: ""
        });
      }), o.value = o.value.concat(l)), ($ = (D = a.value) == null ? void 0 : D.tags) == null || $.forEach((e) => {
        const S = {
          title: e["x-displayName"] ?? e.name,
          href: `#${C(e)}`,
          description: e.description,
          type: "tag",
          tag: e.name,
          body: ""
        };
        o.value.push(S), e.operations && e.operations.forEach((t) => {
          const { parameterMap: c } = B(t), x = A(t) || c.value;
          let f = null;
          typeof x != "boolean" && (f = x);
          const O = {
            type: "req",
            title: t.name ?? t.path,
            href: `#${q(t, e)}`,
            operationId: t.operationId,
            description: t.description ?? "",
            httpVerb: t.httpVerb,
            path: t.path,
            tag: e.name,
            operation: t
          };
          f && (O.body = f), o.value.push(O);
        });
      });
      const n = (E = a.value) == null ? void 0 : E.webhooks, m = [];
      n && Object.keys(n).forEach((e) => {
        Object.keys(n[e]).forEach((t) => {
          var c;
          m.push({
            type: "webhook",
            title: "Webhook",
            href: `#${L({ name: e, method: t })}`,
            description: `${(c = n[e][t]) == null ? void 0 : c.name}`,
            httpVerb: t,
            tag: e,
            body: ""
          });
        }), o.value = o.value.concat(m);
      });
      const v = T.value ? {} : J(a.value), b = [];
      v && (Object.keys(v).forEach((e) => {
        b.push({
          type: "model",
          title: "Model",
          href: `#${W({ name: e })}`,
          description: v[e].title ?? e,
          tag: e,
          body: ""
        });
      }), o.value = o.value.concat(b)), i.setCollection(o.value);
    },
    { immediate: !0 }
  ), {
    resetSearch: F,
    fuseSearch: p,
    selectedSearchResult: d,
    searchResultsWithPlaceholderResults: H,
    searchText: s
  };
}
export {
  te as useSearchIndex
};
