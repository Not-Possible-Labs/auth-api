import { defineComponent as u, openBlock as i, createElementBlock as h, Fragment as y, createVNode as o, withCtx as t, createTextVNode as a, createBlock as B, createCommentVNode as f } from "vue";
import p from "./ParameterList.vue.js";
import k from "./RequestBody.vue.js";
const C = /* @__PURE__ */ u({
  __name: "OperationParameters",
  props: {
    operation: {},
    schemas: {}
  },
  setup(n) {
    const l = n, m = (r) => {
      var e, s;
      return ((s = (e = l.operation) == null ? void 0 : e.parameters) == null ? void 0 : s.filter((d) => d.in === r)) ?? [];
    };
    return (r, e) => {
      var s;
      return i(), h(y, null, [
        o(p, {
          parameters: m("path"),
          schemas: r.schemas
        }, {
          title: t(() => e[0] || (e[0] = [
            a("Path Parameters")
          ])),
          _: 1
        }, 8, ["parameters", "schemas"]),
        o(p, {
          parameters: m("query"),
          schemas: r.schemas
        }, {
          title: t(() => e[1] || (e[1] = [
            a("Query Parameters")
          ])),
          _: 1
        }, 8, ["parameters", "schemas"]),
        o(p, {
          parameters: m("header"),
          schemas: r.schemas
        }, {
          title: t(() => e[2] || (e[2] = [
            a("Headers")
          ])),
          _: 1
        }, 8, ["parameters", "schemas"]),
        o(p, {
          parameters: m("cookie"),
          schemas: r.schemas
        }, {
          title: t(() => e[3] || (e[3] = [
            a("Cookies")
          ])),
          _: 1
        }, 8, ["parameters", "schemas"]),
        (s = r.operation) != null && s.requestBody ? (i(), B(k, {
          key: 0,
          requestBody: r.operation.requestBody,
          schemas: r.schemas
        }, {
          title: t(() => e[4] || (e[4] = [
            a("Body")
          ])),
          _: 1
        }, 8, ["requestBody", "schemas"])) : f("", !0)
      ], 64);
    };
  }
});
export {
  C as default
};
