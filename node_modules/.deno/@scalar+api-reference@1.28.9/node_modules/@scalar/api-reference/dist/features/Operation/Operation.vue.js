import { defineComponent as i, unref as t, openBlock as n, createElementBlock as l, Fragment as m, createBlock as a, createCommentVNode as c } from "vue";
import { useWorkspace as p } from "@scalar/api-client/store";
import { getPointer as d } from "../../blocks/helpers/getPointer.js";
import { useBlockProps as f } from "../../blocks/hooks/useBlockProps.js";
import u from "./layouts/ClassicLayout.vue.js";
import h from "./layouts/ModernLayout.vue.js";
const g = /* @__PURE__ */ i({
  __name: "Operation",
  props: {
    id: {},
    layout: { default: "modern" },
    transformedOperation: {},
    collection: {},
    server: {},
    schemas: {}
  },
  setup(o) {
    const s = p(), { operation: r } = f({
      store: s,
      collection: o.collection,
      location: d([
        "paths",
        o.transformedOperation.path,
        o.transformedOperation.httpVerb.toLowerCase()
      ])
    });
    return (e, O) => e.collection && t(r) ? (n(), l(m, { key: 0 }, [
      e.layout === "classic" ? (n(), a(u, {
        key: 0,
        id: e.id,
        collection: e.collection,
        operation: t(r),
        schemas: e.schemas,
        server: e.server,
        transformedOperation: e.transformedOperation
      }, null, 8, ["id", "collection", "operation", "schemas", "server", "transformedOperation"])) : (n(), a(h, {
        key: 1,
        id: e.id,
        collection: e.collection,
        operation: t(r),
        schemas: e.schemas,
        server: e.server,
        transformedOperation: e.transformedOperation
      }, null, 8, ["id", "collection", "operation", "schemas", "server", "transformedOperation"]))
    ], 64)) : c("", !0);
  }
});
export {
  g as default
};
