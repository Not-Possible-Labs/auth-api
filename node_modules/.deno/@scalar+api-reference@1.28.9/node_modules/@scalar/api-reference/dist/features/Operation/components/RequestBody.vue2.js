import { defineComponent as v, computed as q, ref as f, openBlock as o, createElementBlock as s, createElementVNode as B, renderSlot as h, createVNode as n, unref as y, createCommentVNode as r } from "vue";
import { ScalarMarkdown as k } from "@scalar/components";
import b from "./ContentTypeSelect.vue.js";
import C from "../../../components/Content/Schema/Schema.vue.js";
const V = { key: 0 }, S = { class: "request-body-title" }, _ = {
  key: 0,
  class: "request-body-description"
}, N = {
  key: 0,
  class: "request-body-schema"
}, g = /* @__PURE__ */ v({
  __name: "RequestBody",
  props: {
    requestBody: {},
    schemas: {}
  },
  setup(a) {
    var u;
    const l = q(
      () => {
        var e;
        return Object.keys(((e = a.requestBody) == null ? void 0 : e.content) ?? {});
      }
    ), t = f("application/json");
    return (u = a.requestBody) != null && u.content && l.value.length > 0 && (t.value = l.value[0]), (e, d) => {
      var c, i, m;
      return e.requestBody ? (o(), s("div", V, [
        B("div", S, [
          h(e.$slots, "title", {}, void 0, !0),
          n(b, {
            defaultValue: t.value,
            requestBody: e.requestBody,
            onSelectContentType: d[0] || (d[0] = ({ contentType: p }) => t.value = p)
          }, null, 8, ["defaultValue", "requestBody"]),
          e.requestBody.description ? (o(), s("div", _, [
            n(y(k), {
              value: e.requestBody.description
            }, null, 8, ["value"])
          ])) : r("", !0)
        ]),
        (c = e.requestBody.content) != null && c[t.value] ? (o(), s("div", N, [
          n(y(C), {
            compact: "",
            noncollapsible: "",
            schemas: e.schemas,
            value: (m = (i = e.requestBody.content) == null ? void 0 : i[t.value]) == null ? void 0 : m.schema
          }, null, 8, ["schemas", "value"])
        ])) : r("", !0)
      ])) : r("", !0);
    };
  }
});
export {
  g as default
};
